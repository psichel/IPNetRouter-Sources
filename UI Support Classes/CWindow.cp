// =================================================================================//	CWindow.cp			й1996 Sustainable Softworks All rights reserved.// =================================================================================//	LWindow with GetForeAndBackColor accessor//		to support non-default window background colors//	Also adds AttemptClose to save window position to preferences file//		when window is closed.  Notice the Windows UserCon is set to it's//		RedIDT (by InvokeWindow) to match the saved position with the//		corresponding window.//	Add printing support#include "CWindow.h"#include "MacSupport.h"#include "IPRouterCommon.h"#include <LString.h>// ---------------------------------------------------------------------------------//		е CWindow(LStream*)// ---------------------------------------------------------------------------------CWindow::CWindow(	LStream	*inStream )		: LWindow( inStream ){	// init for printing	//mPrintRecordH = nil;}// ---------------------------------------------------------------------------------//		е ~CWindow// ---------------------------------------------------------------------------------CWindow::~CWindow(){	// remember last window position	ResIDT	rPPob;	rPPob = this->GetUserCon();	SaveWindowPosition( this, rPPob );}// ---------------------------------------------------------------------------//		е GetForeAndBackColors// ---------------------------------------------------------------------------//	Get the foreground and background colors of a WindowvoidCWindow::GetForeAndBackColors(	RGBColor	*outForeColor,	RGBColor	*outBackColor){	*outForeColor = mForeColor;	*outBackColor = mBackColor;}// ===========================================================================#pragma mark -#pragma mark ее printing// ---------------------------------------------------------------------------//		е ObeyCommand// ---------------------------------------------------------------------------//	Respond to commandsBooleanCWindow::ObeyCommand(	CommandT	inCommand,	void		*ioParam){	Boolean		cmdHandled = true;	switch (inCommand) {					case cmd_Print:			HandlePrint();			break;		case cmd_PrintOne:			HandlePrintOne();			break;		default:			cmdHandled = LWindow::ObeyCommand(inCommand, ioParam);			break;	}	return cmdHandled;}// ---------------------------------------------------------------------------//		е FindCommandStatus// ---------------------------------------------------------------------------//	Pass back whether a Command is enabled and/or marked (in a Menu)voidCWindow::FindCommandStatus(	CommandT	inCommand,	Boolean		&outEnabled,	Boolean		&outUsesMark,	UInt16		&outMark,	Str255		outName){	switch (inCommand) {			case cmd_Print:		case cmd_PrintOne:			outEnabled = true;			break;					default:			LWindow::FindCommandStatus(inCommand, outEnabled,									outUsesMark, outMark, outName);			break;	}}// ---------------------------------------------------------------------------//	е HandlePrint													  [public]// ---------------------------------------------------------------------------//	Handle the "print" commandvoidCWindow::HandlePrint(){	StPrintSession	session(mPrintSpec);	UDesktop::Deactivate();	bool	printIt = UPrinting::AskPrintJob(mPrintSpec);	UDesktop::Activate();	if (printIt) {		SendSelfAE(kCoreEventClass, kAEPrint, ExecuteAE_No);		DoPrint();	}}// ---------------------------------------------------------------------------//	е HandlePrintOne												  [public]// ---------------------------------------------------------------------------//	Handle the "print one" commandvoidCWindow::HandlePrintOne(){	StPrintSession	session(mPrintSpec);	mPrintSpec.SetPrintJobParams(1, UPrinting::max_Pages, 1);	SendSelfAE(kCoreEventClass, kAEPrint, ExecuteAE_No);	DoPrint();}// ---------------------------------------------------------------------------//		е DoPrint// ---------------------------------------------------------------------------//	Print window contentsvoidCWindow::DoPrint(){	// make printout view	LPrintout* thePrintout = LPrintout::CreatePrintout(rPPob_ToolPrintout);		// set print record	thePrintout->SetPrintSpec(mPrintSpec);	//thePrintout->SetPrintRecord(mPrintRecordH);		// get occupant to install in placeholder	LPlaceHolder* thePlace = (LPlaceHolder*) thePrintout->FindPaneByID(kPlaceHolder1);	mPrintView = (LView*) this->FindPaneByID(kPrintView);		if (mPrintView != nil) {		thePlace->InstallOccupant(mPrintView, kAlignTopLeft);				// print it		thePrintout->DoPrintJob();	}		// clean up	delete thePrintout;}