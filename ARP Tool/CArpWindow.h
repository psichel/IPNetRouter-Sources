// =================================================================================//	CArpWindow.h	 	©1999 Sustainable Softworks. All rights reserved.// =================================================================================//	Arp Window#pragma once#include "Cwindow.h"#include <LListener.h>#include "CInetMapperThread.h"#include "CArpTable.h"#include "CSpinCursor.h"class LCaption;class LEditField;class LStdPopupMenu;class CArpWindow : public CWindow, public LListener, public CObjectMaster {public:	enum { class_ID = 'ARPw' };								CArpWindow( LStream *inStream );	virtual		 				~CArpWindow();	void				FinishCreateSelf();	Boolean				HandleKeyPress(const EventRecord&	inKeyEvent);	virtual void		ListenToMessage( MessageT inMessage, void *ioParam );	virtual Boolean		ObeyCommand(								CommandT			inCommand,								void				*ioParam);		void				UpdateTable();	void				DisplayArpEntry(ArpEntry_t* inArpEntry);	void				ReadArpEntry(ArpEntry_t* inArpEntry);	void				IoctlResponse(long inResult);	void				LookupNameToAddress();	void				LookupAddressToName();	void				AbortLookup();	void				LookupBegin();	void				LookupComplete(Boolean lookupSucceeded);	virtual void		ObjectThreadDied(LThread *inThread);protected:	void				ActivateSelf();	void				DeactivateSelf();	UInt8				mLookupType;			// used for abort lookup	UInt32				mLookupAddress;			// DNS address requested	Boolean				mPendingLookup;	Boolean				mCanRetry;	CInetMapperThread*	mInetMapperThread;		// thread object to do DNS lookups	LInternetMapper*	mMapper;				// mapper used for reverse name resolution	private:		LControl*			mAddButton;	LControl*			mRemoveButton;	LControl*			mArpQueryButton;	CSpinCursor*		mSpinCursor;		// Spin cursor object	LBeepAttachment*	mBeepAttachment;		CArpTable*			mArpTable;	// ioctl	LCaption*			mStatusCaption;		// pointer to status caption object};