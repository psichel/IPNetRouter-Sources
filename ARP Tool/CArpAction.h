// =================================================================================//	CArpAction.h	 	©1999 Sustainable Softworks. All rights reserved.// =================================================================================//	Arp actions#pragma once#include "CArpData.h"//#include <LListener.h>#include <OpenTptClient.h>#include <stropts.h>//class CArpAction : public LListener, LPeriodical {class CArpAction {public:	enum { class_ID = 'ARPa' };								CArpAction();	virtual		 				~CArpAction();	void				Terminate();	void				Init();//	SInt32				LoadArpConfig(CArpData* arpData);		OTResult			UpdateArpData();	SInt32				GetParamString(UInt8* dp, SInt32 start, SInt32 end, Str63 outStr);	OTResult			ArpAddEntry(ArpEntry_t* inArpEntry);	OTResult			ArpDeleteEntry(ArpEntry_t* inArpEntry);	OTResult			ArpQueryEntry(ArpEntry_t* inArpEntry);	OTResult			ArpSQueryEntry(ArpEntry_t* inArpEntry);	OTResult			DoIoctl(UInt32 inCmd, void* inData);protected:	void				CopyIntoCommandBuffer							(char *buffer, UInt32 *currentOffset, void *data, UInt32 dataLength);	void				CopyInterfaceNameIntoCommandBuffer							(char *buffer, UInt32 *currentOffset, char *interfaceName);	void				CopyProtoAddrIntoCommandBuffer							(char *buffer, UInt32 *currentOffset, void *protoAddr, UInt32 protoSize);//	virtual void		SpendTime(const EventRecord &inMacEvent);	UInt32				mTickStart;			// mark start of delay interval	private:		StreamRef 			mArpStream;			// Stream to ARP module	// ioctl	strioctl			mStri;				// STREAMS STR_I ioctl structure	Str255				mNDDString;			// NDD parameter string	Boolean				mNeedInit;	Str63				mInterfaceName;		// remember interface name};