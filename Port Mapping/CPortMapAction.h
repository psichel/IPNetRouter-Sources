// =================================================================================//	CPortMapAction.h	 	©1997 Sustainable Softworks. All rights reserved.// =================================================================================//	Configure Interfaces Window#pragma once#include "MyTypes.h"#include <LListener.h>#include <LCleanupTask.h>#include <LPeriodical.h>#include "CObjectMaster.h"#include <OpenTptClient.h>#include <stropts.h>class CReceiveUDPThread;class CSendUDPThread;class CTurboUDPEndpoint;class LCaption;class CLogWindow;class CConfigDocument;class CPortMapData;class CPortMapAction : public LListener, LPeriodical, public CObjectMaster {public:	enum { class_ID = 'MapA' };								CPortMapAction();	virtual		 				~CPortMapAction();	SInt32				LoadPortMapConfig(CPortMapData* inPortMapData);	virtual void		ListenToMessage( MessageT inMessage, void *ioParam );	void				StartMonitoring();	void				StopMonitoring();	virtual void		SpendTime(const EventRecord &inMacEvent);		void				Init();	void				Terminate(Boolean inCanWait=true);	OTResult			UpdatePortMapData();	OTResult			DoPortMapEntry(PortMapEntry_t* inEntry, Boolean inUpdate=true);	OTResult			DoIoctl(UInt32 inCmd, void* inData);	void				ReceiveData(LDataArrived* inMessage);	virtual void		ObjectThreadDied(LThread *inThread);protected:	void				LastComplete();	CTurboUDPEndpoint*	mEndpoint;			// our network endpoint object	CReceiveUDPThread*	mReceiveUDPThread;	UInt16				mUpdateRow;			// point to next row in table to be updated	private:		UInt32				mLastTime;			// tick counter	Boolean				mNeedInit;	Boolean				mGotResponse;};