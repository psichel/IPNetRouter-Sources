// ===========================================================================//	CIPRouterApp.h		©1996 Sustainable Softworks. All rights reserved.// ===========================================================================#pragma once#include <LApplication.h>#include <LPreferencesFile.h>class CLogFile;class LWindow;class CConfigDocument;class CAboutDialog;class CStartupThread;class CAuthorizationThread;class CGURLThread;class LThread;class	CIPRouterApp : public LDocApplication {public:						CIPRouterApp();		// constructor registers all PPobs	virtual 			~CIPRouterApp();		// stub destructor	void				Run();	void				Initialize();	virtual void		ProcessNextEvent();		// this overriding function performs application functions			virtual Boolean		ObeyCommand(CommandT inCommand, void* ioParam);				// this overriding function returns the status of menu items			virtual void		FindCommandStatus(CommandT inCommand,							Boolean &outEnabled, Boolean &outUsesMark,							UInt16 &outMark, Str255 outName);	Boolean				AllowSubRemoval(LCommander*	inSub);	OSStatus			Startup0();			// open prefs file	OSStatus			Startup1();			// check for registration	OSStatus			Startup2();			// check for expiration	OSStatus			Startup3();			// demo startup dialog	Boolean				AppStarted();	Boolean				CheckAuthorization();	void				StartUp();	LWindow*			SplashUp();			// show splash screen	void				SplashDown();		// take down splash screen	void				BeginEvents();		// start handling events	void				ShowStartupDialog();	void				ShowAboutBox();	void				LoadSplash(CAboutDialog* inWindow);	void				ObjectThreadDied(LThread *inThread);	void				DoQuit(SInt32 inSaveOption);	UInt32				mRegKey;		    // Remember key	Boolean				mStartupPause;	Boolean				mTrialFlag;		// Not expired	protected:	void				HandleAppleEvent(							const AppleEvent	&inAppleEvent,							AppleEvent			&outAEReply,							AEDesc				&outResult,							long				inAENumber);	virtual void		OpenDocument( FSSpec *inMacFSSpec );	virtual LModelObject *	MakeNewDocument();	virtual void		ChooseDocument();		CConfigDocument*	mDocument;		// We're a single Doc application, only one	LDialogBox*			mStartupDialog;	UInt32				mXTime;	Boolean				mStartupFlag;	Boolean				mMenuFlag;	Boolean				mBeginEvents;	LDialogBox*			mRegisterDialog;	LPreferencesFile*	mPrefsFile;	LPreferencesFile*	mDemoExpireFile;	int					mAppResFile;	Boolean				mLaunchGURL;	CGURLThread*		mGURLThread;	CStartupThread*		mStartupThread;	// startup thread object	CAuthorizationThread* mAuthorizationThread;	// authorization thread object	CLogFile*			mLogFile;};const long ae_GURL					= 4001;const long ae_GKey					= 4002;	// Get Key value// StartupThread result codesconst OSStatus kSTNoError			= 0;const OSStatus kSTIsRegistered		= 1;const OSStatus kSTQuit				= 2;const ResIDT	rSTR_ApplicationMode	= 128;	// app mode: nolog, fba,...// calculate demo interval: days, hours, minutes, secondsconst UInt32 kDTime = (UInt32)21 * (UInt32)24 * (UInt32)60 * (UInt32)60;const SInt16 kModeNone					= 0;const SInt16 kModeFBA					= 2;const SInt16 kModeWamnet				= 4;const SInt16 kModeApple					= 8;