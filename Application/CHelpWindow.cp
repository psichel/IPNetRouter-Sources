// =================================================================================//	CHelpWindow.cp					й1996 Sustainable Softworks All rights reserved.// =================================================================================//	IPNetRouter Help Window#include "CHelpWindow.h"#include "MacSupport.h"#include "IPRouterCommon.h"#include "CNetscapeEvent.h"#include <string.h>extern	SInt32				gBaseLanguage;// ---------------------------------------------------------------------------------//		е CreateHelpWindowStream [static]// ---------------------------------------------------------------------------------CHelpWindow *CHelpWindow::CreateHelpWindowStream(	LStream	*inStream ){	return new CHelpWindow( inStream );}// ---------------------------------------------------------------------------------//		е CHelpWindow(LStream*)// ---------------------------------------------------------------------------------CHelpWindow::CHelpWindow(	LStream	*inStream )		: CWindow( inStream ){	mBaseResourceID = 0;}// ---------------------------------------------------------------------------------//		е ~CHelpWindow// ---------------------------------------------------------------------------------CHelpWindow::~CHelpWindow(){}// ---------------------------------------------------------------------------------//		е FinishCreateSelf// ---------------------------------------------------------------------------------//	Finish creating the Help window.voidCHelpWindow::FinishCreateSelf(){	// Link the window (the listener) with the controls in	// the window (the broadcasters).	UReanimator::LinkListenerToControls(		(CHelpWindow *)this, this, rPPob_RouterHelpWindow );			mMoreInfoButton = (LStdButton*) FindPaneByID(kSearchForMoreInfoButton);	mLanguagePopup = (LStdPopupMenu*)this->FindPaneByID( kLanguagePopup );	mLanguagePopup->SetValue(gBaseLanguage+1); // set the language popup}// ---------------------------------------------------------------------------//		е AttemptClose// ---------------------------------------------------------------------------//	Try to close a Window as a result of direct user actionvoidCHelpWindow::AttemptClose(){									// Get approval from SuperCommander	if ((mSuperCommander == nil) || mSuperCommander->AllowSubRemoval(this)) {		 		 							// Send Close AE for recording only		SendSelfAE(kAECoreSuite, kAEClose, false);		// remember last window position		SaveWindowPosition( this, rPPob_RouterHelpWindow );		delete this;	}}// ---------------------------------------------------------------------------------//		е ListenToMessage// ---------------------------------------------------------------------------------voidCHelpWindow::ListenToMessage(	MessageT	inMessage,	void		*ioParam ){	try {		Str255 tStr;				switch ( inMessage ) {			case kSearchForMoreInfoButton: // more info button - get the proper URL for this language, then pass to open browser				Handle	searchURLTextH = ::GetResource('STR ',kSearchURLBase + (1000 * gBaseLanguage));							if (searchURLTextH != nil) {    				HLock(searchURLTextH);    				memcpy((Ptr)tStr,*searchURLTextH,GetHandleSize(searchURLTextH));    				p2cstr(tStr);    				Send_Netscape_OpenURL((Ptr)tStr);    				HUnlock(searchURLTextH);    				::ReleaseResource(searchURLTextH);				}				break;			case kLanguagePopup: // language popup								short	itemSelected;				itemSelected = mLanguagePopup->GetValue();				gBaseLanguage = itemSelected - 1;								LoadTextInWindow(0);				// now set the Search Sustworks button caption for the chosen language				Handle	buttonLTextH = ::GetResource('STR ',kSearchButtonBase + (1000 * gBaseLanguage));			    			if (buttonLTextH != nil) {    				HLock(buttonLTextH);    				mMoreInfoButton->SetDescriptor((unsigned char*)*buttonLTextH);    				HUnlock(buttonLTextH);    				::ReleaseResource(buttonLTextH);				}				break;			}	}	catch (const LException& inErr) {		Str31 errStr;		::NumToString( inErr.GetErrorCode(), errStr);		::ParamText(errStr, nil, nil, nil);		UDesktop::Deactivate();		// Alert will swallow Deactivate event		::Alert(ALRT_OTError, nil);		UDesktop::Activate();	} 	catch (...) {		UDesktop::Deactivate();		// Alert will swallow Deactivate event		::Alert(ALRT_Unexpected, nil);		UDesktop::Activate();	}}// ---------------------------------------------------------------------------------//		е LoadTextInWindow// ---------------------------------------------------------------------------------voidCHelpWindow::LoadTextInWindow(short inBaseResourceID){	UInt32	textHandleSize;	Ptr		textPtr;	short 	i;		if (inBaseResourceID != 0) {		mBaseResourceID = inBaseResourceID;	}	// display requested text if known	if (mBaseResourceID != 0) {			// set the window help in the chosen language		LTextEditView	*theHelpTextPane;		theHelpTextPane = (LTextEditView*) FindPaneByID( kHelpTextPane );		ThrowIfNil_( theHelpTextPane );		Handle	helpTextH = ::GetResource('TEXT', mBaseResourceID + (1000 * gBaseLanguage));		if (helpTextH != nil) {		    		// the following code removes the unneeded \r (CR) which are present    		// in the translated text.  It leaves in double \r, but removes single CR    		// so the text appears clean in the Help window    		    		textHandleSize = GetHandleSize(helpTextH);    		textPtr = *helpTextH;    		HLock(helpTextH);    		for(i=0;i<textHandleSize-1;i++)    		{    			if((*(textPtr+i) == 0x0D) && (*(textPtr+i+1) == 0x0D))    			{    				*(textPtr+i) = 0x01;    				*(textPtr+i+1) = 0x01;    			}    		}    		for(i=0;i<textHandleSize-1;i++)    		{    			if(*(textPtr+i) == 0x0D)    			{    				*(textPtr+i) = 0x20;    			}    		}    		for(i=0;i<textHandleSize-1;i++)    		{    			if((*(textPtr+i) == 0x01) && (*(textPtr+i+1) == 0x01))    			{    				*(textPtr+i) = 0x0D;    				*(textPtr+i+1) = 0x0D;    			}    		}    		theHelpTextPane->SetTextHandle(helpTextH);    		HUnlock(helpTextH);    		::ReleaseResource(helpTextH);    	}		}}// ===========================================================================#pragma mark -#pragma mark ее printing// ---------------------------------------------------------------------------//		е ObeyCommand// ---------------------------------------------------------------------------//	Respond to commandsBooleanCHelpWindow::ObeyCommand(	CommandT	inCommand,	void		*ioParam){	Boolean		cmdHandled = true;	switch (inCommand) {					case cmd_Print:			HandlePrint();			break;		case cmd_PrintOne:			HandlePrintOne();			break;		default:			cmdHandled = CWindow::ObeyCommand(inCommand, ioParam);			break;	}	return cmdHandled;}// ---------------------------------------------------------------------------//		е FindCommandStatus// ---------------------------------------------------------------------------//	Pass back whether a Command is enabled and/or marked (in a Menu)voidCHelpWindow::FindCommandStatus(	CommandT	inCommand,	Boolean		&outEnabled,	Boolean		&outUsesMark,	UInt16		&outMark,	Str255		outName){	switch (inCommand) {			case cmd_Print:		case cmd_PrintOne:			outEnabled = true;			break;					default:			CWindow::FindCommandStatus(inCommand, outEnabled,									outUsesMark, outMark, outName);			break;	}}// ---------------------------------------------------------------------------//		е DoPrint// ---------------------------------------------------------------------------//	Print window contentsvoidCHelpWindow::DoPrint(){	// make printout view	LPrintout* thePrintout = LPrintout::CreatePrintout(rPPob_ToolPrintout);		// set print record	thePrintout->SetPrintSpec(mPrintSpec);	//thePrintout->SetPrintRecord(mPrintRecordH);		// get occupant to install in placeholder	LPlaceHolder* thePlace = (LPlaceHolder*) thePrintout->FindPaneByID(kPlaceHolder1);	mPrintView = (LView*) this->FindPaneByID( kHelpTextPane );		if (mPrintView != nil) {		thePlace->InstallOccupant(mPrintView, kAlignNone);				// print it		thePrintout->DoPrintJob();	}		// clean up	delete thePrintout;}