// =================================================================================//	CFilterAction.h	 	©1998 Sustainable Softworks. All rights reserved.// =================================================================================//	IP Filter Actions#pragma once#include "MyTypes.h"#include <LListener.h>#include <LCleanupTask.h>#include <LPeriodical.h>#include "CObjectMaster.h"#include <OpenTptClient.h>#include <stropts.h>class CReceiveUDPThread;class CSendUDPThread;class CTurboUDPEndpoint;class CConfigDocument;class CFilterData;class CFilterAction : public LListener, public CObjectMaster {public:	enum { class_ID = 'FilA' };								CFilterAction();	virtual		 				~CFilterAction();	OTResult			LoadFilterConfig(CFilterData* inFilterData);	OTResult			RestoreFilterConfig();	virtual void		ListenToMessage( MessageT inMessage, void *ioParam );		void				Init();	void				Terminate(Boolean inCanWait=true);	OTResult			UpdateFilterData();	OTResult			DoFilterEntry(FilterEntry_t* inEntry, Boolean inUpdate=true);	OTResult			DoIoctl(UInt32 inCmd, void* inData);	void				ReceiveData(LDataArrived* inMessage);	virtual void		ObjectThreadDied(LThread *inThread);protected:	void				LastComplete();	CTurboUDPEndpoint*	mEndpoint;			// our network endpoint object	CReceiveUDPThread*	mReceiveUDPThread;	UInt16				mUpdateRow;			// point to next row in table to be updated	private:	Boolean				mNeedInit;	};