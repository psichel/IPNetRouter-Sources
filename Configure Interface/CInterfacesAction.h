// =================================================================================//	CInterfacesAction.h	 	©1998 Sustainable Softworks. All rights reserved.// =================================================================================//	Configure Interfaces Window#pragma once#include <LListener.h>#include <OpenTptClient.h>#include <stropts.h>#include "CNatTask.h"#include "CSnmpTask.h"#include "CResidentIfInfo.h"class CTurboICMPEndpoint;//class CTurboTCPEndpoint;class CConfigDocument;class CInterfacesData;class CInterfacesAction : public LListener, LPeriodical {public:	enum { class_ID = 'CIFa' };								CInterfacesAction();	virtual		 				~CInterfacesAction();	void				Terminate();	SInt32				LoadIfConfig(CInterfacesData* interfacesData);	virtual void		ListenToMessage( MessageT inMessage, void *ioParam );		Boolean             CheckIPReady();	OTResult			UpdateInterfacesData();	SInt32				GetParamString(UInt8* dp, SInt32 start, SInt32 end, Str63 outStr);	SInt32				GetInterfaceNameString(UInt8* dp, SInt32 start, SInt32 end, Str63 outStr);	void				ProviderWillClose();	OTResult			DoInterfaceEntry(InterfaceEntry_t* inInterfaceEntry, Boolean inUpdate=true);	OTResult			RemoveInterface(InterfaceEntry_t* inInterfaceEntry, Boolean inUpdate=true);	void				RemoveAll();	OTResult			SetPseudoGateway(InterfaceEntry_t* inInterfaceEntry);	OTResult			RemovePseudoGateway(InterfaceEntry_t* inInterfaceEntry);	StringPtr			GetDNSAddress(Str255 outAddressString);	OTResult			EnableMasquerading(InterfaceEntry_t* inInterfaceEntry);	OTResult			DisableMasquerading(InterfaceEntry_t* inInterfaceEntry);	void				ParseIfName(Str63 inStr,							Str63 outModuleName,							SInt32& outDeviceNumber,							SInt32& outInterfaceNumber);	SInt32				CompareInterfaceEntry(							InterfaceEntry_t* inInterfaceEntryA,							InterfaceEntry_t* inInterfaceEntryB);	OTResult			DoIoctl(UInt32 inCmd, void* inData);	OTResult			GetOTParameter(ConstStr255Param inName, Str255 outValue);	OTResult			SetOTParameter(ConstStr255Param inName, ConstStr255Param inValue);	OTResult			SetForwarding(UInt8 inForwarding);	OTResult			GetInterfaceFlags(Str63 inInterfaceName, short* outFlags);	OTResult			SetInterfaceFlags(Str63 inInterfaceName, short inFlags);protected:	OSStatus			PlumbLinkStack(InterfaceEntry_t* inInterfaceEntry);	virtual void		SpendTime(const EventRecord &inMacEvent);	UInt32				FindSecondaryNATInterface();	UInt32				FindPrivateInterface();	UInt32				mTickStamp;			// start of delay interval	private:		CNatTask*			mNatTask;	StreamRef 			mIpStream;			// Stream to IP module	CTurboUDPEndpoint*	mEndpoint;			// endpoint for event notification	UInt32				mEntrySize;	Boolean				mIsListener;	Boolean				mNeedGateway;		// PPP needs PseudoGateway	Boolean				mProviderWillClose;	Boolean				mProviderWasClosed;	CInterfacesData*	mInterfacesData;	// copy of interfaces to restore	Boolean				mIsMonitoringPPP;	Boolean				mIsDHCPServerOn;	UInt8				mFlagsWhere;		// where to look for interface flags	Boolean				mIsOTClosed;	UInt8				mRetryCount;	// ioctl	strioctl			mStri;				// STREAMS STR_I ioctl structure	Str255				mNDDString;			// NDD parameter string};const SInt16 kFlagsUnknown			= 0;const SInt16 kFlagsHi				= 1;const SInt16 kFlagsLo				= 2;