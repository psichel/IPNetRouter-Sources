// =================================================================================//	Autopush.cp	 				©1997 Sustainable Softworks. All rights reserved.// =================================================================================//	Streams Autopush support for Open Transport#include <OpenTransport.h>#include <OpenTptClient.h>#include <OpenTptInternet.h>#include <OpenTptDevLinks.h>#include <stropts.h>#include "Autopush.h"// ---------------------------------------------------------------------------//		¥ SetupAutopush// ---------------------------------------------------------------------------//	Setup to Autopush our Proxy module on top of the PPP link.//	Assumes InitOpenTransport() has been called previously.OSStatusSetupAutopush(UInt32& outMessageCode){	OSStatus		err = kOTNoError;	OTPortRecord	portInfo;	UInt32			index;	UInt16			deviceType;		// Scan available ports	index = 0;	deviceType = 0;	while (OTGetIndexedPort(&portInfo, index)) {		deviceType = OTGetDeviceTypeFromPortRef(portInfo.fRef);		index += 1;			// setup target devices for autopush		if (deviceType == kOTPPPDevice) {//		if ((deviceType == kOTPPPDevice) ||//			(deviceType == kOTSLIPDevice) ||//			(deviceType == kOTMDEVDevice)) {						err = AutopushModule("Proxym", portInfo.fModuleName, outMessageCode);			if (err != kOTNoError) break;		}	}	return err;}// ---------------------------------------------------------------------------//		¥ AutopushModule// ---------------------------------------------------------------------------//	Autopush requested module.//	First check to see if it is already set for autopush to avoid duplicates////	Success returns 0.//	Failure returns a non-zero OSStatus and sets outMessageCode//	to the index of a corresponding STRn text message resource.////	User notification is handled outside of this function to minimize//	restrictions on when this function can be called.//	Assumes InitOpenTransport() has been called previously.OSStatusAutopushModule(char* inModuleName, char* inDriverName, UInt32& outMessageCode){	OSStatus		err = kOTNoError;	StreamRef		myStreamRef;	OTAutopushInfo	myAutopushInfo;	struct strioctl stri;	short			index;	Boolean			isAP;	do {		// open a stream to the sad device		myStreamRef = OTStreamOpen(kSADModuleName, O_RDWR, &err);		if (err != kOTNoError) {			outMessageCode = kSAD;			myStreamRef = nil;		// set to nil so we don't try to close it			break;		}				// setup to request autopush info				OTMemzero(&myAutopushInfo, sizeof(OTAutopushInfo));		myAutopushInfo.sap_cmd = kSAP_ALL;		OTStrCopy((char*)myAutopushInfo.sap_device_name,			inDriverName);	// name of data link module		//myAutopushInfo.sap_minor = 0;		//myAutopushInfo.sap_lastminor = 0;		//myAutopushInfo.sap_npush = 0;	// number of modules to push		//OTStrCopy((char*)myAutopushInfo.sap_list[0], "Proxym");	// name of module to push		// send ioctl to get autopush info		stri.ic_cmd = I_SAD_GAP;		stri.ic_dp	= (char*)&myAutopushInfo;		stri.ic_len = sizeof(OTAutopushInfo);		stri.ic_timout = -1;		err = OTStreamIoctl(myStreamRef, I_STR, (void*)&stri);		// if KENODEVErr - the module specified is not configured for autopush		// treat as no error		if (err == kENODEVErr) err = kOTNoError;		if (err != kOTNoError ) {			outMessageCode = kGetAutopush;			break;		}		// check if module is already setup for autopush		isAP = false;		for (index=0; index<myAutopushInfo.sap_npush; index++) {			if ( OTStrEqual(myAutopushInfo.sap_list[index], inModuleName) ) {				isAP = true;				break;			}		}		if (isAP) break;	// found it, skip I_SAD_SAP		// setup for set autopush ioctl			myAutopushInfo.sap_cmd = kSAP_ALL;		OTStrCopy((char*)myAutopushInfo.sap_device_name,			inDriverName);	// name of data link module		myAutopushInfo.sap_minor = 0;		myAutopushInfo.sap_lastminor = 0;		// add our module to the previous list!		index = myAutopushInfo.sap_npush;		myAutopushInfo.sap_npush += 1;	// number of modules to push		OTStrCopy((char*)myAutopushInfo.sap_list[index], inModuleName);	// name of module to push		// send ioctl to set autopush info		stri.ic_cmd = I_SAD_SAP;		stri.ic_dp	= (char*)&myAutopushInfo;		stri.ic_len = sizeof(OTAutopushInfo);		stri.ic_timout = -1;		err = OTStreamIoctl(myStreamRef, I_STR, (void*)&stri);		if (err != kOTNoError ) {			outMessageCode = kSetAutopush;			break;		}			} while (false);		// close SAD stream to free up resources	if (myStreamRef) {		OTStreamClose(myStreamRef);	}		// return OT status	return err;}