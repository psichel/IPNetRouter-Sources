/*	File:		InetConfiguration.h	Contains:	Header file for 	Copyright:	© 1993-1998 by Apple Computer, Inc. and Mentat Inc., all rights reserved.*/#ifndef __INETCONFIGURATION__#define __INETCONFIGURATION__//#ifndef __MACTYPES__//	#include "MacTypes.h"//#endif#if PRAGMA_STRUCT_ALIGN	#if TARGET_CPU_PPC		#pragma options align=power	#endif	#if TARGET_CPU_68K		#pragma options align=mac68k	#endif#endif// :OpenTransport:Interfaces:PrivIncludes:led.htypedef char*		caddr_t;typedef UInt32		u_long;		// Used by sockets, TCP, UDP, and XTP// :OpenTransport:Sources:Internet:Sockets:Includes:socket.h/* * Structure used by kernel to store most * addresses. */struct sockaddr {		unsigned short	sa_family;				/* address family */		char			sa_data[14];			/* up to 14 bytes of direct address */};// :OpenTransport:Sources:Internet:Includes:if.h/* * Interface request structure used for socket * ioctl's.	 All interface ioctl's must have parameter * definitions which begin with ifr_name.  The * remainder may be interface specific. */struct	ifreq {#define IFNAMSIZ		36						/* Must be same as kMaxProviderNameSize %%% */		char	ifr_name[IFNAMSIZ];				/* if name, e.g. "en0" */		union {				struct	sockaddr ifru_addr;				struct	sockaddr ifru_dstaddr;				struct	sockaddr ifru_broadaddr;				short	ifru_flags;				int		ifru_metric;				caddr_t ifru_data;		} ifr_ifru;#define ifr_addr		ifr_ifru.ifru_addr		/* address */#define ifr_dstaddr		ifr_ifru.ifru_dstaddr	/* other end of p-to-p link */#define ifr_broadaddr	ifr_ifru.ifru_broadaddr /* broadcast address */#define ifr_flags		ifr_ifru.ifru_flags		/* flags */#define ifr_metric		ifr_ifru.ifru_metric	/* metric */#define ifr_data		ifr_ifru.ifru_data		/* for use by interface */};#define IFF_UP			0x1				/* interface is up */#define IFF_BROADCAST	0x2				/* broadcast address valid */#define IFF_DEBUG		0x4				/* turn on debugging */#define IFF_LOOPBACK	0x8				/* is a loopback net */#define IFF_POINTOPOINT 0x10			/* interface is point-to-point link */#define IFF_NOTRAILERS	0x20			/* avoid use of trailers */#define IFF_RUNNING		0x40			/* resources allocated */#define IFF_NOARP		0x80			/* no address resolution protocol */#define IFF_PROMISC		0x100			/* receive all packets */#define IFF_ALLMULTI	0x200			/* receive all multicast packets */#define IFF_MULTICAST	0x400			/* multicast capable */#define IFF_MULTI_BCAST 0x800			/* multicast using broadcast address */#define IFF_UNNUMBERED	0x1000			/* non-unique local address *//* flags set internally only: */#define IFF_CANTCHANGE	(IFF_POINTOPOINT | IFF_RUNNING | \		IFF_MULTICAST | IFF_MULTI_BCAST)// :OpenTransport:Sources:Internet:Includes:route.h// struct ifnet is required for rtentry, but it's not used// by any of the ioctls we're documenting.  So rather than// drag in its definition, which is complex and largely irrelevant// under Mentat TCP/IP, we just define it opaquely -- Quinn, 29 Aug 1998struct ifnet;/* * We distinguish between routes to hosts and routes to networks, * preferring the former if available.	For each route we infer * the interface to use from the gateway address supplied when * the route was entered.  Routes that forward packets through * gateways are marked so that the output routines know to address the * gateway rather than the ultimate destination. *///struct rtentry {//		u_long	rt_hash;				/* to speed lookups *///		struct	sockaddr rt_dst;		/* key *///		struct	sockaddr rt_gateway;	/* value *///		short	rt_flags;				/* up/down?, host/net *///		short	rt_refcnt;				/* # held references *///		u_long	rt_use;					/* raw # packets forwarded *///		struct	ifnet *rt_ifp;			/* the answer: interface to use *///};//#define RTF_UP			0x1				/* route useable *///#define RTF_GATEWAY		0x2				/* destination is a gateway *///#define RTF_HOST		0x4				/* host entry (net otherwise) *///#define RTF_DYNAMIC		0x10			/* created dynamically (by redirect) *///#define RTF_MODIFIED	0x20			/* modified dynamically (by redirect) */// :OpenTransport:Sources:Internet:Includes:if_arp.h/* * ARP ioctl request */struct arpreq {		struct	sockaddr arp_pa;				/* protocol address */		struct	sockaddr arp_ha;				/* hardware address */		int		arp_flags;						/* flags */};/*	arp_flags and at_flags field values */#define ATF_INUSE		0x01	/* entry in use */#define ATF_COM			0x02	/* completed entry (enaddr valid) */#define ATF_PERM		0x04	/* permanent entry */#define ATF_PUBL		0x08	/* publish entry (respond for other host) */#define ATF_USETRAILERS 0x10	/* has requested trailers */// :OpenTransport:Sources:Internet:Sockets:Includes:sockio.h// "miioccom.h" defines many important ioctls, but the definitions// were commented out.  This has been rectified in the OT 2.0 SDK,// which moves those definitions to "OpenTransport.h".  We copy// the definition of MIOC_SIOC here, but conditionalise it so that// we'll compile with both pres and post-OT 2.0 interfaces.// -- Quinn, 29 Aug 1998#ifndef MIOC_SIOC	#define MIOC_SIOC		'j'		/* sockio.h socket ioctl's */#endif#define _IO(x,y)		MIOC_CMD(MIOC_SIOC,y)#define _IOR(x,y,t)		MIOC_CMD(MIOC_SIOC,y)#define _IOW(x,y,t)		MIOC_CMD(MIOC_SIOC,y)#define _IOWR(x,y,t)	MIOC_CMD(MIOC_SIOC,y)#define SIOCADDRT		_IOW(r, 10, struct rtentry)		/* add route */#define SIOCDELRT		_IOW(r, 11, struct rtentry)		/* delete route */#define SIOCFLUSHRT		_IO(r, 55)						/* flush all routes */#define SIOCSIFADDR		_IOW(i, 12, struct ifreq)		/* set ifnet address */#define SIOCGIFADDR		_IOWR(i,13, struct ifreq)		/* get ifnet address */#define SIOCSIFDSTADDR	_IOW(i, 14, struct ifreq)		/* set p-p address */#define SIOCGIFDSTADDR	_IOWR(i,15, struct ifreq)		/* get p-p address */#define SIOCSIFFLAGS	_IOW(i, 16, struct ifreq)		/* set ifnet flags */#define SIOCGIFFLAGS	_IOWR(i,17, struct ifreq)		/* get ifnet flags */#define SIOCGIFCONF		_IOWR(i,20, struct ifconf)		/* get ifnet list */#define SIOCSIFMTU		_IOW(i, 21, struct ifreq)		/* set if_mtu */#define SIOCGIFMTU		_IOWR(i,22, struct ifreq)		/* get if_mtu */#define SIOCGIFBRDADDR	_IOWR(i,23, struct ifreq)		/* get broadcast addr */#define SIOCSIFBRDADDR	_IOW(i,24, struct ifreq)		/* set broadcast addr */#define SIOCGIFNETMASK	_IOWR(i,25, struct ifreq)		/* get net addr mask */#define SIOCSIFNETMASK	_IOW(i,26, struct ifreq)		/* set net addr mask */#define SIOCGIFMETRIC	_IOWR(i,27, struct ifreq)		/* get IF metric */#define SIOCSIFMETRIC	_IOW(i,28, struct ifreq)		/* set IF metric */#define SIOCSARP		_IOW(i, 30, struct arpreq)		/* set arp entry */#define SIOCGARP		_IOWR(i,31, struct arpreq)		/* get arp entry */#define SIOCDARP		_IOW(i, 32, struct arpreq)		/* delete arp entry */#define IF_UNITSEL		_IOW(i, 54, int)				/* set unit number */#if PRAGMA_ALIGN_SUPPORTED#pragma options align=reset#endif#endif