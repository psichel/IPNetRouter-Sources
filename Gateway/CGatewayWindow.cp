// =================================================================================//	CGatewayWindow.cp				й1996 Sustainable Softworks All rights reserved.// =================================================================================//	Gateway Window#include "CGatewayWindow.h"#include "CGatewayConst.h"#include "CConfigDocument.h"#include "CResidentIfInfo.h"#include "CGatewayData.h"#include "CGatewayAction.h"#include "CInterfacesAction.h"#include "CIPNumberEditField.h"#include "CHelpWindow.h"#include "IPRouterCommon.h"#include "CSubnetCalcWindow.h"#include "MacSupport.h"#include "IPSupport.h"#include "CLogAction.h"#include <UReanimator.h>#include <LString.h>#include <LPreferencesFile.h>#include <UResourceMgr.h>#include <OpenTransport.h>#include <OpenTptInternet.h>#include <OpenTptLinks.h>#include "MoreNetworkSetup.h"// Globalsextern CLogAction*			gLogAction;extern CGatewayData* 		gGatewayData;extern CGatewayAction*		gGatewayAction;extern CInterfacesAction*	gInterfacesAction;// ---------------------------------------------------------------------------------//		е CGatewayWindow(LStream*)// ---------------------------------------------------------------------------------CGatewayWindow::CGatewayWindow(	LStream	*inStream )		: CWindow( inStream ){}// ---------------------------------------------------------------------------------//		е ~CGatewayWindow// ---------------------------------------------------------------------------------CGatewayWindow::~CGatewayWindow(){	// disconnect from gateway data	gGatewayData->RemoveListener(this);}// ---------------------------------------------------------------------------------//		е FinishCreateSelf// ---------------------------------------------------------------------------------//	Finish creating the Gateway window.voidCGatewayWindow::FinishCreateSelf(){		UInt32	    value;	Str255	    str;	UInt8	    len;		// Link the window (the listener) with the controls in	// the window (the broadcasters).	UReanimator::LinkListenerToControls(		(CGatewayWindow *)this, this, rRidL_GatewayWindow );	// setup Forwarding popup	mForwardingPopup = (LStdPopupMenu*)this->FindPaneByID( kForwardingPopup );	ThrowIfNil_(mForwardingPopup);	// upon open popup	mUponOpenPopup = (LStdPopupMenu*)this->FindPaneByID( kUponOpenPopup );	ThrowIfNil_(mUponOpenPopup);	// Remain Connected	mRemainConnectedCheckBox = (LStdControl*)FindPaneByID( kRemainConnected );	ThrowIfNil_(mRemainConnectedCheckBox);	// ExcludeFromNAT	mExcludeFromNATCheckBox = (LStdControl*)FindPaneByID( kExcludeFromNAT );	ThrowIfNil_(mExcludeFromNATCheckBox);    // ExcludeNet	mExcludeNetField = (CIPNumberEditField*)FindPaneByID( kExcludeNet );	ThrowIfNil_(mExcludeNetField);	    // link the window (listener) to the IP Address field	mExcludeNetField->AddListener( this );	// Disconnect At Quit	mDisconnectAtQuitCheckBox = (LStdControl*)FindPaneByID( kDisconnectAtQuit );	ThrowIfNil_(mDisconnectAtQuitCheckBox);	// Show PPP dialogs	mShowPPPdialogsCheckBox = (LStdControl*)FindPaneByID( kShowPPPdialogs );	ThrowIfNil_(mShowPPPdialogsCheckBox);	// Enable Local NAT	mEnableLocalNATCheckBox = (LStdControl*)FindPaneByID( kEnableLocalNATCheckBox );	ThrowIfNil_(mEnableLocalNATCheckBox);	// DNS Forwarding	mDNSForwardingCheckBox = (LStdControl*)FindPaneByID( kDNSForwardingCheckBox );	ThrowIfNil_(mDNSForwardingCheckBox);	// DialupDNS	mDialupDNSCheckBox = (LStdControl*)FindPaneByID( kDialupDNSCheckBox );	ThrowIfNil_(mDialupDNSCheckBox);	mDialupUsernameField = (CEditField*)FindPaneByID( kDialupUsernameField );	ThrowIfNil_(mDialupUsernameField);	mDialupPasswordField = (CEditField*)FindPaneByID( kDialupPasswordField );	ThrowIfNil_(mDialupPasswordField);		// link window (listener) to username and password fields	mDialupUsernameField->AddListener(this);	mDialupPasswordField->AddListener(this);	// Limit MTU for PPPoE	mLimitMTUForPPPoECheckBox = (LStdControl*)FindPaneByID( kLimitMTUForPPPoECheckBox );	ThrowIfNil_(mLimitMTUForPPPoECheckBox);	// TR Cable Modem	mTRCableModemCheckBox = (LStdControl*)FindPaneByID( kTRCableModemCheckBox );	ThrowIfNil_(mTRCableModemCheckBox);	// Dial on demand	mDialOnDemandCheckBox = (LStdControl*)FindPaneByID( kDialOnDemand );	ThrowIfNil_(mDialOnDemandCheckBox);	// Exposed host radio controls	mExposedNoneRadioButton = (LStdControl*)FindPaneByID( kExposedNoneRadioButton );	ThrowIfNil_(mExposedNoneRadioButton);	mExposedGatewayRadioButton = (LStdControl*)FindPaneByID( kExposedGatewayRadioButton );	ThrowIfNil_(mExposedGatewayRadioButton);	mExposedAddressRadioButton = (LStdControl*)FindPaneByID( kExposedAddressRadioButton );	ThrowIfNil_(mExposedAddressRadioButton);	mExposedAddressField = (CIPNumberEditField*)FindPaneByID( kExposedAddressField );	ThrowIfNil_(mExposedAddressField);	// link the window (listener) to the IP Address field	mExposedAddressField->AddListener( this );	// setup pointer to status caption	mStatusCaption = (LCaption*)FindPaneByID( kStatusCaption );	ThrowIfNil_(mStatusCaption);	// display current settings	mForwardingPopup->SetValue( gGatewayData->GetDataIPforwarding() );	mUponOpenPopup->SetValue( gGatewayData->GetDataUponOpen() );	mRemainConnectedCheckBox->SetValue( gGatewayData->GetDataRemainConnected() );	mExcludeFromNATCheckBox->SetValue( gGatewayData->GetDataExcludeFromNAT() );	{    	NetNumber_t net;    	gGatewayData->GetDataExcludeNet(&net);    	IP_NetToStr(net, str);    	mExcludeNetField->SetDescriptor(str);    }	mDisconnectAtQuitCheckBox->SetValue( gGatewayData->GetDataDisconnectAtQuit() );	mShowPPPdialogsCheckBox->SetValue( gGatewayData->GetDataShowPPPdialogs() );	mEnableLocalNATCheckBox->SetValue( gGatewayData->GetDataEnableLocalNAT() );	mDNSForwardingCheckBox->SetValue( gGatewayData->GetDataDNSForwarding() );	mDialupDNSCheckBox->SetValue( gGatewayData->GetDataDialupDNS() );	mDialupUsernameField->SetDescriptor( gGatewayData->GetDataDialupUsername(str) );	gGatewayData->GetDataDialupPassword(str);		len = str[0];		LString::CopyPStr("\pеееееееееееееееееееееееееееееее", str);		if (len < 31) str[0] = len;	mDialupPasswordField->SetDescriptor(str);	mLimitMTUForPPPoECheckBox->SetValue( gGatewayData->GetDataLimitMTUForPPPoE() );	mTRCableModemCheckBox->SetValue( gGatewayData->GetDataTRCableModem() );	mDialOnDemandCheckBox->SetValue( gGatewayData->GetDataDialOnDemand() );	value = gGatewayData->GetDataExposedHostAddress();	mExposedAddressField->SetValue(value);	{		value = gGatewayData->GetDataExposedHost();		if (value == kExposedHostNone) mExposedNoneRadioButton->SetValue(1);		else if (value == kExposedHostGateway) mExposedGatewayRadioButton->SetValue(1);		else if (value == kExposedHostAddress) mExposedAddressRadioButton->SetValue(1);	}	// Connect to Gateway Data	gGatewayData->AddListener(this);/*#if powerc	// Enable Network Setup if available	if ( IsNetworkSetupAvailable() ) {		mUseNetworkSetupCheckBox->Enable();	} else {		mUseNetworkSetupCheckBox->Disable();	}#else	mUseNetworkSetupCheckBox->Disable();#endif	// get window state resource	UInt8 state = 1;	StNewResource windowState( (ResType)'WSta',		(ResIDT)rPPob_GatewayWindow, kGatewayStateSize, true );	// inDefaultSize, inGet1Resource	if (windowState.ResourceExisted()) {		// restore Use Network Setup state		state = ((UInt8*)(*windowState.mResourceH))[0];	}	mUseNetworkSetupCheckBox->SetValue( state );*/}// ---------------------------------------------------------------------------//		е AttemptClose// ---------------------------------------------------------------------------//	Try to close a Window as a result of direct user actionvoidCGatewayWindow::AttemptClose(){/*	// get window state resource	StNewResource windowState( (ResType)'WSta',		(ResIDT)rPPob_GatewayWindow, kGatewayStateSize, true );	// inDefaultSize, inGet1Resource	// remember Use Network Setup state	((UInt8*)(*windowState.mResourceH))[0] = mUseNetworkSetupCheckBox->GetValue();*/	CWindow::AttemptClose();	// inherit behavior}// ---------------------------------------------------------------------------------//		е ListenToMessage// ---------------------------------------------------------------------------------voidCGatewayWindow::ListenToMessage(	MessageT	inMessage,	void		*ioParam ){	SInt32		value;	Str255		str;	try {		switch ( inMessage ) {					case msg_SignalDataEvent:				UInt32 dataID = *(UInt32*)ioParam;				// gateway data has changed, update window display				switch (dataID) {					case DATA_ID(kGatewayData, kDataIPforwarding):						mForwardingPopup->SetValue( gGatewayData->GetDataIPforwarding() );						break;					case DATA_ID(kGatewayData, kDataUponOpen):						mUponOpenPopup->SetValue( gGatewayData->GetDataUponOpen() );						break;					case DATA_ID(kGatewayData, kDataDialOnDemand):						mDialOnDemandCheckBox->SetValue( gGatewayData->GetDataDialOnDemand() );						break;					case DATA_ID(kGatewayData, kDataRemainConnected):						mRemainConnectedCheckBox->SetValue( gGatewayData->GetDataRemainConnected() );						break;					case DATA_ID(kGatewayData, kDataExcludeFromNAT):						mExcludeFromNATCheckBox->SetValue( gGatewayData->GetDataExcludeFromNAT() );						break;					case DATA_ID(kGatewayData, kDataExcludeNet):                    	{                        	NetNumber_t net;                        	gGatewayData->GetDataExcludeNet(&net);                        	IP_NetToStr(net, str);                        	mExcludeNetField->SetDescriptor(str);                        }						break;					case DATA_ID(kGatewayData, kDataDisconnectAtQuit):						mDisconnectAtQuitCheckBox->SetValue( gGatewayData->GetDataDisconnectAtQuit() );						break;					case DATA_ID(kGatewayData, kDataShowPPPdialogs):						mShowPPPdialogsCheckBox->SetValue( gGatewayData->GetDataShowPPPdialogs() );						break;										case DATA_ID(kGatewayData, kDataEnableLocalNAT):						mEnableLocalNATCheckBox->SetValue( gGatewayData->GetDataEnableLocalNAT() );						break;										case DATA_ID(kGatewayData, kDataDNSForwarding):						mDNSForwardingCheckBox->SetValue( gGatewayData->GetDataDNSForwarding() );						break;										case DATA_ID(kGatewayData, kDataDialupDNS):						mDialupDNSCheckBox->SetValue( gGatewayData->GetDataDialupDNS() );						// login client for user action in window (so we don't have to any time						// state changes which might occur before connection comes up)						gGatewayAction->DialupDNSClientStart();						break;										case DATA_ID(kGatewayData, kDataDialupUsername):						mDialupUsernameField->SetDescriptor( gGatewayData->GetDataDialupUsername(str) );						break;										case DATA_ID(kGatewayData, kDataDialupPassword):						gGatewayData->GetDataDialupPassword(str);							UInt8 len = str[0];							LString::CopyPStr("\pеееееееееееееееееееееееееееееее", str);							if (len < 31) str[0] = len;												mDialupPasswordField->SetDescriptor(str);						break;										case DATA_ID(kGatewayData, kDataLimitMTUForPPPoE):						mLimitMTUForPPPoECheckBox->SetValue( gGatewayData->GetDataLimitMTUForPPPoE() );						break;										case DATA_ID(kGatewayData, kDataTRCableModem):						mTRCableModemCheckBox->SetValue( gGatewayData->GetDataTRCableModem() );						break;										case DATA_ID(kGatewayData, kDataExposedHost):						value = gGatewayData->GetDataExposedHost();						switch (value) {							case kExposedHostNone:								mExposedNoneRadioButton->SetValue(1);								break;							case kExposedHostGateway:								mExposedGatewayRadioButton->SetValue(1);								break;							case kExposedHostAddress:								mExposedAddressRadioButton->SetValue(1);								break;						}						break;										case DATA_ID(kGatewayData, kDataExposedHostAddress):						mExposedAddressField->SetValue( gGatewayData->GetDataExposedHostAddress() );						break;				}				break;							case kForwardingPopup:				OSErr				err = kOTNoError;				UInt8				forwarding;				// Get forwarding type				forwarding = mForwardingPopup->GetValue();				if (forwarding != gGatewayData->GetDataIPforwarding()) {					err = gInterfacesAction->SetForwarding(forwarding);					// tell user what happenned					IoctlResponse(err);				}				break;			case kUponOpenPopup:				value = mUponOpenPopup->GetValue();				gGatewayData->SetDataUponOpen(value);				break;			case kRemainConnected:				value = mRemainConnectedCheckBox->GetValue();				if (value != gGatewayData->GetDataRemainConnected()) {					gGatewayData->SetDataRemainConnected(value);					gGatewayData->SignalDataChange();				}				break;			case kExcludeFromNAT:				value = mExcludeFromNATCheckBox->GetValue();				if (value != gGatewayData->GetDataExcludeFromNAT()) {					gGatewayData->SetDataExcludeFromNAT(value);					gGatewayData->SignalDataChange();				}				break;			case kDisconnectAtQuit:				value = mDisconnectAtQuitCheckBox->GetValue();				gGatewayData->SetDataDisconnectAtQuit(value);				break;			case kShowPPPdialogs:				value = mShowPPPdialogsCheckBox->GetValue();				gGatewayData->SetDataShowPPPdialogs(value);									break;			case kEnableLocalNATCheckBox:				value = mEnableLocalNATCheckBox->GetValue();				gGatewayData->SetDataEnableLocalNAT(value);				break;			case kDNSForwardingCheckBox:				value = mDNSForwardingCheckBox->GetValue();				gGatewayData->SetDataDNSForwarding(value);				break;			case kDialupDNSCheckBox:				value = mDialupDNSCheckBox->GetValue();				gGatewayData->SetDataDialupDNS(value);				break;			case kLimitMTUForPPPoECheckBox:				value = mLimitMTUForPPPoECheckBox->GetValue();				gGatewayData->SetDataLimitMTUForPPPoE(value);				break;			case kTRCableModemCheckBox:				value = mTRCableModemCheckBox->GetValue();				gGatewayData->SetDataTRCableModem(value);				break;			case kExposedNoneRadioButton:				value = mExposedNoneRadioButton->GetValue();				if (value) {					gGatewayData->SetDataExposedHost(kExposedHostNone);				}				break;			case kExposedGatewayRadioButton:				value = mExposedGatewayRadioButton->GetValue();				if (value) {					gGatewayData->SetDataExposedHost(kExposedHostGateway);				}				break;			case kExposedAddressRadioButton:				value = mExposedAddressRadioButton->GetValue();				if (value) {					gGatewayData->SetDataExposedHost(kExposedHostAddress);					value = mExposedAddressField->GetValue();					gGatewayData->SetDataExposedHostAddress(value);				}				break;			case msg_FieldActionKey:				if (ioParam == mExposedAddressField) {					value = mExposedAddressField->GetValue();					gGatewayData->SetDataExposedHostAddress(value);				}				if (ioParam == mDialupUsernameField) {					mDialupUsernameField->GetDescriptor(str);					gGatewayData->SetDataDialupUsername(str);				}				if (ioParam == mDialupPasswordField) {					mDialupPasswordField->GetDescriptor(str);					if (str[1] != 0xA5) gGatewayData->SetDataDialupPassword(str);				}				if (ioParam == mExcludeNetField) {				    UInt8 len;				    NetNumber_t net;				    net.address = mExcludeNetField->GetValue();				    len = mExcludeNetField->GetValueLength();				    net.mask = 0xFFFFFFFF << (32-len);				}				break;			case msg_ControlClicked:	// capture generic radio button click				break;			case kDialOnDemand:				value = mDialOnDemandCheckBox->GetValue();				gGatewayData->SetDataDialOnDemand(value);				break;						case kDoneButton:				// accept any text field changes					// exposed host addr				value = mExposedAddressField->GetValue();				gGatewayData->SetDataExposedHostAddress(value);					// dialupDNS username				mDialupUsernameField->GetDescriptor(str);				gGatewayData->SetDataDialupUsername(str);					// dialupDNS password				mDialupPasswordField->GetDescriptor(str);				if (str[1] != 0xA5) gGatewayData->SetDataDialupPassword(str);				    // ExcludeNet				{				    UInt8 len;				    NetNumber_t net;				    net.address = mExcludeNetField->GetValue();				    len = mExcludeNetField->GetValueLength();				    net.mask = 0xFFFFFFFF << (32-len);				    gGatewayData->SetDataExcludeNet(&net);				}				    				// close the window				AttemptClose();				//DoClose();				break;									case msg_HelpButton:											// Create the Help Window				CHelpWindow		*theWindow;				theWindow = (CHelpWindow*)InvokeWindow(kNameHelp, this);				theWindow->Show();				theWindow->LoadTextInWindow(rTEXT_GatewayHelp);				break;										// Endpoint notifications			case kOTProviderWillClose:				break;			case msg_BroadcasterDied:				break;			default:				gLogAction->LogText("\p\rCGatewayWindow unknown async message type: ", inMessage);				break;		}	}	catch (const LException& inErr) {		Str31 errStr;		::NumToString( inErr.GetErrorCode(), errStr);		::ParamText(errStr, nil, nil, nil);		UDesktop::Deactivate();		// Alert will swallow Deactivate event		::Alert(ALRT_OTError, nil);		UDesktop::Activate();	} 	catch (...) {		gLogAction->LogText("\p\rCGatewayWindow::ListenToMessage unexpected Exception");		::SysBeep(1);	}}// ---------------------------------------------------------------------------------//		е IoctlResponse// ---------------------------------------------------------------------------------//	IoctlResponse - an ioctl completed process the resultvoidCGatewayWindow::IoctlResponse(long inResult){	switch (inResult) {		case 3:				// get NDD forwarding unknown result?		case 0:				// no error			mStatusCaption->SetDescriptor("\pOK");			break;		case kOTNotFoundErr:			mStatusCaption->SetDescriptor("\pkOTNotFoundErr.");			break;				case kEINVALErr:			mStatusCaption->SetDescriptor("\pkEINVALErr - Invalid parameter.");			break;		case kOTDuplicateFoundErr:					mStatusCaption->SetDescriptor("\pkOTDuplicateFoundErr.");			break;		case kEBUSYErr:			mStatusCaption->SetDescriptor("\pkEBUSYErr - Device or resource busy.");			break;		case kPPPNotPrimaryErr:			mStatusCaption->SetDescriptor("\pUnable to configure, PPP is not the primary interface.");			break;		case kENXIOErr:			mStatusCaption->SetDescriptor("\pNo such device or address.");			break;		default:			{				LStr255	status;				status = "\pioctl unexpected result code: ";				Str32 str;				NumToString(inResult, str);				status += str;				mStatusCaption->SetDescriptor( status );			}			break;	}	// end switch}