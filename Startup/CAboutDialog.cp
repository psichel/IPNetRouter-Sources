// ===========================================================================//	CAboutDialog.cp			  ©1998 Sustainable Softworks. All rights reserved.// ===========================================================================//#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include "CAboutDialog.h"#include "CAboutConst.h"#include "CRegisterConst.h"#include "IPRouterCommon.h"#include "CIPRouterApp.h"#include <LCaption.h>#include <LStream.h>#include <LString.h>#include <UResourceMgr.h>// Globalsextern UInt8	gApplicationMode;// ---------------------------------------------------------------------------//		¥ CAboutDialog(LStream*)// ---------------------------------------------------------------------------//	Construct a DialogBox from the data in a StreamCAboutDialog::CAboutDialog(	LStream	*inStream)		: LDialogBox(inStream){}// ---------------------------------------------------------------------------//		¥ ~CAboutDialog// ---------------------------------------------------------------------------//	DestructorCAboutDialog::~CAboutDialog(){}// ---------------------------------------------------------------------------//		¥ FinishCreateSelf// ---------------------------------------------------------------------------//	Finish creation by linking DialogBox as a Listener to its Default//	and Cancel Buttons.voidCAboutDialog::FinishCreateSelf(){	LControl*	theButton;	LCaption*	theCaption;		LDialogBox::FinishCreateSelf();	// inherit behavior from parent	if (gApplicationMode & kModeWamnet) {		// pre-registered, disable registration buttons		theButton = (LControl*) FindPaneByID(kWWWRegistrationPageButton);		ThrowIfNil_(theButton);		theButton->Disable();		theButton->Hide();		theButton = (LControl*) FindPaneByID(kEditRegistrationButton);		ThrowIfNil_(theButton);		theButton->Disable();		theButton->Hide();			theCaption = (LCaption*) FindPaneByID(kNumberOfCopiesCaption);		ThrowIfNil_(theCaption);		theCaption->Disable();		theCaption->Hide();			theCaption = (LCaption*) FindPaneByID(kNumberOfCopies);		ThrowIfNil_(theCaption);		theCaption->Disable();		theCaption->Hide();		}		// Link the window (the listener) with the controls in	// the window (the broadcasters).	UReanimator::LinkListenerToControls(		(CAboutDialog *)this, this, rRidL_AboutBoxWindow );}// ---------------------------------------------------------------------------//		¥ LoadAboutBox// ---------------------------------------------------------------------------//	Load the About Box to show version and registration data if anyvoidCAboutDialog::LoadAboutBox(){	LCaption	*theCaption;	Str255		str;	UInt8		len;		// get vers resource	StResource versData( (ResType)'vers', 1, false, false );	// (...inThrowFail, inCurrResOnly)	if (versData.mResourceH) {		// display version info		theCaption = (LCaption*) FindPaneByID( kAboutBoxVersionPane );		ThrowIfNil_(theCaption);		theCaption->SetDescriptor( (unsigned char*)&(*versData.mResourceH)[6] );	}	// get registration data if any	StResource regData( (ResType)'RegD',		rRegD_RegistrationData, false, false );	// inThrowFail, inGet1Resource	if (regData.mResourceH) {		// license name		len = ((UInt8*)(*regData.mResourceH))[index_RNam]+1;		//OTMemcpy(str, &(*regData.mResourceH)[index_RNam], len);		::BlockMove( &(*regData.mResourceH)[index_RNam], str, len );		theCaption = (LCaption*) FindPaneByID(kName);		ThrowIfNil_(theCaption);		theCaption->SetDescriptor(str);				// license org		len = ((UInt8*)(*regData.mResourceH))[index_ROrg]+1;		::BlockMove( &(*regData.mResourceH)[index_ROrg], str, len );		theCaption = (LCaption*) FindPaneByID(kOrganization);		ThrowIfNil_(theCaption);		theCaption->SetDescriptor(str);		// license num		len = ((UInt8*)(*regData.mResourceH))[index_RNum]+1;		::BlockMove( &(*regData.mResourceH)[index_RNum], str, len );		theCaption = (LCaption*) FindPaneByID(kNumberOfCopies);		ThrowIfNil_(theCaption);		theCaption->SetDescriptor(str);	}	else {		theCaption = (LCaption*) FindPaneByID(kName);		ThrowIfNil_(theCaption);		theCaption->SetDescriptor("\pUnregistered Demo");		}}// ---------------------------------------------------------------------------//		¥ ListenToMessage// ---------------------------------------------------------------------------//	Respond to messages from BroadcastersvoidCAboutDialog::ListenToMessage(	MessageT	inMessage,	void		*ioParam){	switch ( inMessage ) {				case cmd_Close:			DoClose();			break;				case msg_WWWRegistrationPage:			mSuperCommander->ObeyCommand(cmd_WWWRegistration, nil);			break;				case msg_EditRegistration:			mSuperCommander->ObeyCommand(cmd_Registration, nil);			break;	}}