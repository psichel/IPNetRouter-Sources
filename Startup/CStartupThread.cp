// ===========================================================================//	CStartupThread.cp	 	й1997 Sustainable Softworks. All rights reserved.// ===========================================================================//	Thread object to step through application startup sequence#include "CStartupThread.h"#include "CIPRouterApp.h"#include "DemoStartupConst.h"#include "CProxyControl.h"// Globalsextern UInt8			gApplicationMode;extern CProxyControl*	gProxyControl;// ===========================================================================#pragma mark еее CStartupThread еееCStartupThread::CStartupThread(	CIPRouterApp*		inApp)		: LThread(false, thread_DefaultStack, threadOption_Default, nil)		  {	mApp = inApp;}// ---------------------------------------------------------------------------//		е ~CStartupThread// ---------------------------------------------------------------------------CStartupThread::~CStartupThread(){}// ---------------------------------------------------------------------------//		е Run// ---------------------------------------------------------------------------void*CStartupThread::Run(){	LWindow* theWindow = nil;	mResult = kSTNoError;	try {		// step through startup sequence		if (!(gApplicationMode & kModeFBA)) theWindow = mApp->SplashUp();		// put up splash screen		mResult = mApp->Startup0();				// open prefs file		if (mResult == kSTNoError) {			if (!(gApplicationMode & kModeFBA)) mApp->LoadSplash((CAboutDialog*)theWindow);	// load splash screen now that we have prefs			// Setup to insert our proxy module			// in subsequent link stacks created by InetConfigurator			gProxyControl->SetupStream();						mResult = mApp->Startup1();			// check registration key						if (mResult == kSTIsRegistered) {				LThread::Sleep(1500);			// sleep 1500 ms				if (!(gApplicationMode & kModeFBA)) mApp->SplashDown();				mApp->BeginEvents();				// startup app directly (skip demo startup window)				mApp->ObeyCommand(msg_DemoRegistrationConfirmed, nil);			}			else if (mResult == kSTNoError) {				// not yet registered				mResult = mApp->Startup2();		// check expiration				// FBA?				if (!(gApplicationMode & kModeFBA)) {					// not FBA					mResult = mApp->Startup3();		// build demo startup dialog					LThread::Sleep(2000);			// sleep 2000 ms					mApp->SplashDown();					mApp->BeginEvents();					mApp->ShowStartupDialog();		// display startup dialog				}				else {					// mResult was set by mApp->Startup2()					// allow FBA in trial mode					LThread::Sleep(1500);					mApp->BeginEvents();					// if not expired, startup app directly (skip demo startup window)					if (mResult == kSTNoError) mApp->ObeyCommand(msg_DemoRegistrationConfirmed, nil);				}				// if running in trial mode, force quit when trial period expires				while (mApp->mTrialFlag && (mResult == kSTNoError)) {				    LThread::Sleep(86400000);       // sleep for 1 day				    mResult = mApp->Startup1();		// check registration key				    if (mResult == kSTIsRegistered) break;            		mResult = mApp->Startup2();		// check expiration				}			}		} else {			if (!(gApplicationMode & kModeFBA)) mApp->SplashDown();			mApp->BeginEvents();		}	}	catch (const LException& inErr) {		mResult = inErr.GetErrorCode();		if (!(gApplicationMode & kModeFBA)) mApp->SplashDown();		mApp->BeginEvents();		// handle exception results		// just report result to Object Master	} 	SetResult(&mResult);	// set result so Object Master can retrieve it.	mApp->ObjectThreadDied(this);	return &mResult;}