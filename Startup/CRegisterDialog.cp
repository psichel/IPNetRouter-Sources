// ===========================================================================//	CRegisterDialog.cp			   ©1993-1996 Metrowerks Inc. All rights reserved.// ===========================================================================//#ifdef PowerPlant_PCH#include PowerPlant_PCH#endif#include "CRegisterDialog.h"#include "CRegisterConst.h"#include "DemoStartupConst.h"#include "IPRouterCommon.h"#include "MacSupport.h"#include "IPSupport.h"#include "CEditField.h"#include <LStream.h>#include <LString.h>#include <UResourceMgr.h>#include <OpenTransport.h>// ---------------------------------------------------------------------------//		¥ CRegisterDialog(LStream*)// ---------------------------------------------------------------------------//	Construct a DialogBox from the data in a StreamCRegisterDialog::CRegisterDialog(	LStream	*inStream)		: LDialogBox(inStream){}// ---------------------------------------------------------------------------//		¥ ~CRegisterDialog// ---------------------------------------------------------------------------//	DestructorCRegisterDialog::~CRegisterDialog(){}// ---------------------------------------------------------------------------//		¥ FinishCreateSelf// ---------------------------------------------------------------------------//	Finish creation by linking DialogBox as a Listener to its Default//	and Cancel Buttons.voidCRegisterDialog::FinishCreateSelf(){	RegInfo_t	regInfo;	LCaption	*theCaption;	Str255		str;	UInt8		len;	Boolean		found = false;	LDialogBox::FinishCreateSelf();	// inherit behavior from parent	{		// get new registration data if any		StResource regData( (ResType)'RegD',			rRegD_RegistrationData2, false, true );	// inThrowFail, inGet1Resource		if (regData.mResourceH) {			LString::CopyPStr((UInt8*)(*regData.mResourceH), str);			if (StringToRegInfo(str, &regInfo)) {				found = true;				// license name				theCaption = (LCaption*) this->FindPaneByID(kName);				ThrowIfNil_(theCaption);				theCaption->SetDescriptor(regInfo.name);								// license org				theCaption = (LCaption*) this->FindPaneByID(kOrganization);				ThrowIfNil_(theCaption);				theCaption->SetDescriptor(regInfo.organization);				// license num				theCaption = (LCaption*) this->FindPaneByID(kNumberOfCopies);				ThrowIfNil_(theCaption);				theCaption->SetDescriptor(regInfo.copies);				// license date				theCaption = (LCaption*) this->FindPaneByID(kRegDate);				ThrowIfNil_(theCaption);				theCaption->SetDescriptor(regInfo.date);			}		}	}	if (!found) {		// get old registration data if any		StResource regData( (ResType)'RegD',			rRegD_RegistrationData, false, true );	// inThrowFail, inGet1Resource		if (regData.mResourceH) {			// license name			len = ((UInt8*)(*regData.mResourceH))[index_RNam]+1;			//OTMemcpy(str, &(*regData.mResourceH)[index_RNam], len);			::BlockMove( &(*regData.mResourceH)[index_RNam], str, len );			theCaption = (LCaption*) this->FindPaneByID(kName);			ThrowIfNil_(theCaption);			theCaption->SetDescriptor(str);						// license org			len = ((UInt8*)(*regData.mResourceH))[index_ROrg]+1;			::BlockMove( &(*regData.mResourceH)[index_ROrg], str, len );			theCaption = (LCaption*) this->FindPaneByID(kOrganization);			ThrowIfNil_(theCaption);			theCaption->SetDescriptor(str);			// license num			len = ((UInt8*)(*regData.mResourceH))[index_RNum]+1;			::BlockMove( &(*regData.mResourceH)[index_RNum], str, len );			theCaption = (LCaption*) this->FindPaneByID(kNumberOfCopies);			ThrowIfNil_(theCaption);			theCaption->SetDescriptor(str);		}	}}// ---------------------------------------------------------------------------//		¥ ListenToMessage// ---------------------------------------------------------------------------//	Respond to messages from BroadcastersvoidCRegisterDialog::ListenToMessage(	MessageT	inMessage,	void		*ioParam){	CEditField*	theEditField;	LStr255		regText;	LStr255		regTextND;	RegInfo_t	regInfo;	UInt32		regKey;	Boolean		isReg1 = false;	Boolean		isReg2 = false;	Boolean		is68K  = false;	switch ( inMessage ) {				case cmd_Close:			DoClose();			break;				case msg_RegisterOK:			// get registration data entered				// key			theEditField = (CEditField*)FindPaneByID(kRegistrationKey);			ThrowIfNil_(theEditField);			theEditField->GetDescriptor(regInfo.key);			// if extended hex key string			if (StringToRegInfo(regInfo.key, &regInfo)) {				// set data in other fields					// name				theEditField = (CEditField*)FindPaneByID(kName);				ThrowIfNil_(theEditField);				theEditField->SetDescriptor(regInfo.name);					// org				theEditField = (CEditField*)FindPaneByID(kOrganization);				ThrowIfNil_(theEditField);				theEditField->SetDescriptor(regInfo.organization);					// number				theEditField = (CEditField*)FindPaneByID(kNumberOfCopies);				ThrowIfNil_(theEditField);				theEditField->SetDescriptor(regInfo.copies);					// date				theEditField = (CEditField*)FindPaneByID(kRegDate);				ThrowIfNil_(theEditField);				theEditField->SetDescriptor(regInfo.date);						}			else {				// get data from other fields					// name				theEditField = (CEditField*)FindPaneByID(kName);				ThrowIfNil_(theEditField);				theEditField->GetDescriptor(regInfo.name);					// org				theEditField = (CEditField*)FindPaneByID(kOrganization);				ThrowIfNil_(theEditField);				theEditField->GetDescriptor(regInfo.organization);					// number				theEditField = (CEditField*)FindPaneByID(kNumberOfCopies);				ThrowIfNil_(theEditField);				theEditField->GetDescriptor(regInfo.copies);					// date				theEditField = (CEditField*)FindPaneByID(kRegDate);				ThrowIfNil_(theEditField);				theEditField->GetDescriptor(regInfo.date);			}			// get key value entered			regKey = HexToNum(regInfo.key);			do {				// build RegText to check key				regText = regInfo.name;				regText += regInfo.organization;				regText += regInfo.copies;				regTextND = regText;				regTextND += kRegisterProductName;				// validate key				isReg1 = (regKey == GetKey(regTextND));				if (!isReg1) {					regText += regInfo.date;					regText += kRegisterProductName;					isReg1 = (regKey == GetKey(regText));				}				if (isReg1) break;				// build RegText to check key (68K only)				regText = regInfo.name;				regText += regInfo.organization;				regText += regInfo.copies;				regTextND = regText;				regTextND += kRegisterProductName68K;				// validate key				isReg2 = (regKey == GetKey(regTextND));				if (!isReg2) {					regText += regInfo.date;					regText += kRegisterProductName68K;					isReg2 = (regKey == GetKey(regText));				}				if (isReg2) {//					#if !powerc		// test 68K only on PPC					#if powerc						isReg2 = false;						is68K = true;						UDesktop::Deactivate();		// Alert will swallow Deactivate event						::Alert(ALRT_68KOnly, nil);						UDesktop::Activate();					#endif				}			} while (false);						// process result			if (isReg1 || isReg2) {				// save valid registration data to prefs file				{	// begin scope for resource object					StNewResource regData( (ResType)'RegD',						rRegD_RegistrationData, kMaxRegDSize, true );	// inDefaultSize, inGet1Resource					if (regData.mResourceH) {						bzero((UInt8*)(*regData.mResourceH), kMaxRegDSize);						::BlockMove(regInfo.name, &(*regData.mResourceH)[index_RNam], regInfo.name[0]+1);						::BlockMove(regInfo.organization, &(*regData.mResourceH)[index_ROrg], regInfo.organization[0]+1);						::BlockMove(regInfo.copies, &(*regData.mResourceH)[index_RNum], regInfo.copies[0]+1);						::BlockMove(&regKey, &(*regData.mResourceH)[index_RKey], 4);					}				}	// end scope for resource object (write it out)				// new extended format				{	// begin scope for resource object					StNewResource regData( (ResType)'RegD',						rRegD_RegistrationData2, kMaxRegDSize2, true );	// inDefaultSize, inGet1Resource					if (regData.mResourceH) {						Str255 tHexStr;						if (isReg2) regInfo.date[0] = 0;	// no date in key						RegInfoToString(&regInfo, tHexStr);						LString::CopyPStr(tHexStr, (UInt8*)(*regData.mResourceH));					}				}	// end scope for resource object (write it out)				// alert user, registration confirmed				UDesktop::Deactivate();		// Alert will swallow Deactivate event				::Alert(ALRT_RegConfirm, nil);				UDesktop::Activate();				// Optional for Testing *** [PAS]				// Check if key is in our database				if (0) CheckKey(regKey, "\p");				// tell supercommander and close registration window				mSuperCommander->ObeyCommand(msg_DemoRegistrationConfirmed, ioParam);				DoClose();			} else if (!is68K) {				UDesktop::Deactivate();		// Alert will swallow Deactivate event				::Alert(ALRT_RegInvalid, nil);				UDesktop::Activate();			}			break;				case msg_RegisterCancel:			DoClose();			break;	}}