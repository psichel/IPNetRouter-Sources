// =================================================================================//	CLogFile.cp				©1996 Sustainable Softworks All rights reserved.// =================================================================================//	Logging window for displaying router status messages#include "CLogFile.h"#include "MacSupport.h"#include "IPRouterCommon.h"#include "CLogData.h"#include "CLogAction.h"// Globalsextern CLogData* 		gLogData;extern CLogAction*		gLogAction;// ---------------------------------------------------------------------------------//		¥ CLogFile(LStream*)// ---------------------------------------------------------------------------------CLogFile::CLogFile(){	mFile = nil;	Init();}// ---------------------------------------------------------------------------------//		¥ ~CLogFile// ---------------------------------------------------------------------------------CLogFile::~CLogFile(){	if (mFile) {		if (gLogData) gLogData->RemoveListener(this);		// Close the data fork.		mFile->CloseDataFork();		// release file object		delete mFile;		mFile = nil;	}}// ---------------------------------------------------------------------------------//		¥ Init// ---------------------------------------------------------------------------------voidCLogFile::Init(){	short	vRefNum;	long	parID;	FSSpec	specWrite;//	LFile*	fileWrite;	OSErr	err = noErr;	Str255	str;		// close any previous log file	if (mFile) {		delete mFile;		mFile = nil;	}	do {		// Get Log File Name		::GetIndString(str, rSTRN_OptionSettings, kOptionLogFileName);		if ( BeginsWith(str, "\pLogFileName") && GetKeywordValue(str, str) ) {			// found name			// Setup to write to file			err = ::FindFolder(kOnSystemDisk, kPreferencesFolderType, kCreateFolder, &vRefNum, &parID);			if (err != noErr) break;			// get FSSpec			err = ::FSMakeFSSpec(vRefNum, parID, str, &specWrite);			if ((err != noErr) && (err != fnfErr)) break;			// Create a new file object.			mFile = new LFile( specWrite );            err = noErr;			try {				// create file				mFile->CreateNewDataFile((OSType)'IPnl', (OSType)'TEXT', smSystemScript);			}			catch (const LException& inErr) {				err = inErr.GetErrorCode();			} 			catch(...) {			    SysBeep(30);			} 			if ((err != dupFNErr) && (err != noErr)) break;			try {				// Open the data fork.				mFile->OpenDataFork( fsRdWrPerm );			}			catch(const LException& inErr) {				err = inErr.GetErrorCode();			} 			catch(...) {			    SysBeep(30);			} 			if ((err != dupFNErr) && (err != noErr)) break;			// init to be empty			err = ::SetEOF(mFile->GetDataForkRefNum(), 0);			if (err != noErr) break;			// listen for Log Data			if (gLogData) gLogData->AddListener(this);				}	} while (false);	if (err != noErr) {		// tell user what happened		gLogAction->LogText("\p\rCLogFile - Unexpected result opening Log File", err);	}}// ---------------------------------------------------------------------------//		¥ AddText// ---------------------------------------------------------------------------//	Add Text to Log FileSInt32CLogFile::AddText(char* inText, SInt32 inLength){	SInt32	bytesWritten;	OSErr	err;		bytesWritten = 0;		if ((inLength > 0) && (mFile)) {			bytesWritten = inLength;										err = ::FSWrite(mFile->GetDataForkRefNum(), &bytesWritten, inText);		if (err != noErr) {			gLogAction->LogText("\p\rCLogFile - Unexpected result writing Log File", err);		}	}		return bytesWritten;}// ---------------------------------------------------------------------------------//		¥ ListenToMessage// ---------------------------------------------------------------------------------voidCLogFile::ListenToMessage(	MessageT	inMessage,	void		*ioParam ){	char* outText;	SInt32 outLength;	switch ( inMessage ) {			case msg_SignalDataEvent:			UInt32 dataID = *(UInt32*)ioParam;			// If Log Data has changed, write new data to file			if (dataID == DATA_ID(kLogData, kDataChange)) {							gLogData->GetDataNewText(&outText, &outLength);				AddText(outText, outLength);			}	}}