// =================================================================================//	CLogAction.cp				©1996 Sustainable Softworks All rights reserved.// =================================================================================//	Logging window for displaying router status messages#include "CLogAction.h"#include "MacSupport.h"#include "IPRouterCommon.h"#include "CLogData.h"// Globalsextern CLogData*		gLogData;// ---------------------------------------------------------------------------------//		¥ CLogAction(LStream*)// ---------------------------------------------------------------------------------CLogAction::CLogAction(){	mFormatH = nil;	mPending = false;}// ---------------------------------------------------------------------------------//		¥ ~CLogAction// ---------------------------------------------------------------------------------CLogAction::~CLogAction(){	if (mFormatH) ::DisposeHandle(mFormatH);}// ---------------------------------------------------------------------------------//		¥ Log Text// ---------------------------------------------------------------------------------//	Log text followed by OT result codevoidCLogAction::LogText(ConstStr255Param inStr, ResultT inResult){	mPending = true;	LogText(inStr);	if (inResult) {		Str31 str;		NumToString(inResult, str);		LogText(str);		LogError(inResult);	}	mPending = false;	Update();}// ---------------------------------------------------------------------------------//		¥ LogCText// ---------------------------------------------------------------------------------//  Append C string to Log DatavoidCLogAction::LogCText(char* inStr){	Str255	str;	SInt32	len;		len = OTStrLength(inStr);	if (len <= 253) {		OTStrCopy((char*)&str[3], inStr);		str[1] = '\r';		str[2] = ' ';		str[0] = len+2;		LogText(str);	}}// ---------------------------------------------------------------------------//		¥ Log Error// ---------------------------------------------------------------------------//	Write text description of error code to log windowvoidCLogAction::LogError(ResultT inResult){	Str255	str;		switch (inResult) {		case kOTNoDataErr:			::GetIndString(str, rPPob_RouterLogWindow, 1);			LogText("\p\r ");			LogText(str);			break;		case kETIMEDOUTErr:			::GetIndString(str, rPPob_RouterLogWindow, 2);			LogText("\p\r ");			LogText(str);			break;		case kOTBadAddressErr:			::GetIndString(str, rPPob_RouterLogWindow, 3);			LogText("\p\r ");			LogText(str);			break;		case kOTBadNameErr:			::GetIndString(str, rPPob_RouterLogWindow, 4);			LogText("\p\r ");			LogText(str);			break;		case kOTAddressBusyErr:			::GetIndString(str, rPPob_RouterLogWindow, 5);			LogText("\p\r ");			LogText(str);			break;		case kENETUNREACHErr:			::GetIndString(str, rPPob_RouterLogWindow, 6);			LogText("\p\r ");			LogText(str);			break;		case kENOENTErr:			::GetIndString(str, rPPob_RouterLogWindow, 7);			LogText("\p\r ");			LogText(str);			break;		case kENXIOErr:			::GetIndString(str, rPPob_RouterLogWindow, 8);			LogText("\p\r ");			LogText(str);			break;		case kEINVALErr:			::GetIndString(str, rPPob_RouterLogWindow, 9);			LogText("\p\r ");			LogText(str);			break;		case kOTDuplicateFoundErr:			::GetIndString(str, rPPob_RouterLogWindow, 10);			LogText("\p\r ");			LogText(str);			break;		case kOTBadReferenceErr:			::GetIndString(str, rPPob_RouterLogWindow, 11);			LogText("\p\r ");			LogText(str);			break;		case kStreamIoctlEvent:			::GetIndString(str, rPPob_RouterLogWindow, 12);			LogText("\p\r ");			LogText(str);			break;		case kOTBadOptionErr:			::GetIndString(str, rPPob_RouterLogWindow, 13);			LogText("\p\r ");			LogText(str);			break;		case kOTOutStateErr:			::GetIndString(str, rPPob_RouterLogWindow, 14);			LogText("\p\r ");			LogText(str);			break;		case kOTAccessErr:			::GetIndString(str, rPPob_RouterLogWindow, 15);			LogText("\p\r ");			LogText(str);			break;		default:			// unrecognized, do nothing			break;	}}// ---------------------------------------------------------------------------------//		¥ LogText// ---------------------------------------------------------------------------------//	Add text to LogData which will update display if log window is visible.//		This routine hides all the underlying mechanics of displaying//		text in a console like window (output only) and saving to a//		log file.voidCLogAction::LogText(ConstStr255Param inStr){LStr255	timeDateStr;UInt8	pos;Boolean	update=false;	// include time stamp if line begins "\r<non-space>"	if ((inStr[1] == '\r') && (inStr[0] > 1) && (inStr[2] != ' ')) {		// build time stamp		UInt32		dateTime;		Str32		str;				if (!mPending) update = true;		::GetDateTime(&dateTime);		// setup formatting resource		if (mFormatH == nil) {			OSErr		err;			mFormatH = ::GetIntlResource(0);	// Get 'itl0' resource			err = ::HandToHand(&mFormatH);		// Get a copy			if (err != noErr) mFormatH = nil;			// modify to use 24 hour time			(**(Intl0Hndl)mFormatH).timeCycle = 0;		}		// void DateString (long dateTime,DateFormlongFlag,char *result,Handle intlHandle);		::DateString(dateTime, shortDate, str, nil);		timeDateStr = "\p\r";		timeDateStr += str;		timeDateStr += "\p ";		// void TimeString (long dateTime,Boolean wantSeconds,char *result,Handle intlHandle);				::TimeString(dateTime, true, str, mFormatH);		timeDateStr += str;		timeDateStr += "\p ";		pos = timeDateStr[0] + 1;			// point to one past date		timeDateStr += inStr;		timeDateStr.Replace(pos, 1, ' ');	// replace \r with <space>	} else timeDateStr = inStr;		// insert text	gLogData->SetDataAddText((char*)&timeDateStr[1], timeDateStr[0]);	if (update) Update();}// ---------------------------------------------------------------------------------//		¥ Update// ---------------------------------------------------------------------------------//	Tell LogData to signal data change (udpate log window and log file)voidCLogAction::Update(){	gLogData->SignalDataChange();}