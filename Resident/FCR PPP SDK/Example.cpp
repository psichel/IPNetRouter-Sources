/* 	Example.cpp: Exercises the DriverInterface class.    	   	This document contains proprietary information developed by    		FCR Software Inc.   		222 Third Street, Suite 3130   		Cambridge, MA 02142   		   	and should not be distributed, copied, or disclosed without explicit   	permission of FCR Software, Inc..   	   	You may use this document and the source herein for developing    	applications that use the LinkUPPP! (FCR PPP) driver.   	   	NOTE: This code assumes that the user has placed a connection    	document in their startup items folder, and restarted to configure    	the driver.	Copyright 1997-98 FCR Software, Inc.		November 6, 1997 - Jessica Kahn <jess@fcr.com>*/#include <iostream.h>#include <stdlib.h>#include <Exception.h>#include "DriverInterface.h"#include "StringUtilities.h"#include "ppp_api.h"void OpenDriver(DriverInterface * theDriver);void StartConnection(DriverInterface * theDriver);void ReportStatus(DriverInterface * theDriver);void EndSession(DriverInterface * theDriver);void PrintAppleTalkInfo(DriverInterface * theDriver);void PrintIPCPInfo(DriverInterface * theDriver);void PrintGeneralInfo(DriverInterface * theDriver);const short	CONNECTION_DURATION = 90;const short SECS_PER_MINUTE = 60;const short DELAY = 5;void main() {	DriverInterface * theDriverP = new DriverInterface("\p"PPP_DRVR_NAME);		unsigned long startingTick, lastTick, currentTick;	startingTick = lastTick = currentTick = TickCount();		OpenDriver(theDriverP);	StartConnection(theDriverP);		// Keep going 'till the # ticks that have gone by is >= CONNECTION_DURATION	// Note: because ticks are getting converted to seconds, and this isn't 	// entirely accurate, the duration of connection will probably be shorter	// than expected.	while ((currentTick - startingTick) / SECS_PER_MINUTE < CONNECTION_DURATION) {		currentTick = TickCount();				// Report stats approximately every 5 seconds		if (currentTick - lastTick > SECS_PER_MINUTE * DELAY) {			ReportStatus(theDriverP);			lastTick = currentTick;		}	}			EndSession(theDriverP);	delete theDriverP;}// ---------------------------------------------------------------------------//		¥ OpenDriver() 	//			Opens the PPP driver// ---------------------------------------------------------------------------void OpenDriver(DriverInterface * theDriver) {	OSErr err;	err = theDriver->OpenPPPDriver();	if (err != noErr) {		cerr << "Error opening PPP driver. Exiting...\n\n";		delete theDriver;		exit(1);	}}// ---------------------------------------------------------------------------//		¥ StartConnection() 	//			Initiates dialing of the modem. This function doesn't return // 			until the modem ccl has completed or there has been an//			unrecoverable error (and this function calls exit() ).// ---------------------------------------------------------------------------void StartConnection(DriverInterface * theDriver) {		// Ensures that the console opens in a timely fashion	cout << "Initiating PPP connection...\n\n";		OSErr err;	short theScriptResult;	short theConnectionStatus;		err = theDriver->Dial();		// Wait until the ccl has finished running. If there's been an error,	// look for it, and exit.	do {		theConnectionStatus = theDriver->GetDriverStatus();		if (theConnectionStatus == STATUS_STALLED ||			theConnectionStatus == STATUS_FAULT ||			theConnectionStatus == STATUS_TIMEOUT ||			theConnectionStatus == STATUS_CLOSING) {				cerr << "Error. GetDriverStatus() returned: "					 << theConnectionStatus << " Exiting...\n\n";				delete theDriver;				exit(1);		}	}	while (theConnectionStatus != STATUS_DONE);		// And then find out if all is well -- any non-zero value is bad	theScriptResult = theDriver->GetScriptResult();		if (err != noErr) {		cerr << "Error getting driver to dial. Exiting...\n\n";		delete theDriver;		exit(1);	}	else if (theScriptResult) {		cerr << "CCL script error when dialing. Exiting...\n\n";		delete theDriver;		exit(1);	}}// ---------------------------------------------------------------------------//		¥ ReportStatus() 	//			Retrieves and prints (to console) connection status information// ---------------------------------------------------------------------------void ReportStatus(DriverInterface * theDriver) {		try {		PrintAppleTalkInfo(theDriver);		PrintIPCPInfo(theDriver);		PrintGeneralInfo(theDriver);	}	catch (long theErr) {		cerr << "Exception raised: " << theErr << ". Exiting...\n\n";		delete theDriver;		exit(1);	}}// ---------------------------------------------------------------------------//		¥ EndSession() 	//			Disconnects the modem// ---------------------------------------------------------------------------void EndSession(DriverInterface * theDriver) {	OSErr err;	err = theDriver->HangUp();	if (err != noErr) {		cerr << "Error getting driver to disconnect. Exiting...\n\n";		delete theDriver;		exit(1);	}	else		cout << "Ending PPP connection...\n\n";}// ---------------------------------------------------------------------------//		¥ PrintAppleTalkInfo() 	//			Gets and prints to console information about AppleTalk// ---------------------------------------------------------------------------void PrintAppleTalkInfo(DriverInterface * theDriver) {		long clientAT, serverAT;	char clientATStr[32], serverATStr[32];		if (theDriver->IsATCPUp()) {		clientAT = theDriver->GetLocalATAddr();		serverAT = theDriver->GetRemoteATAddr();				ATtoString(clientAT, clientATStr);		ATtoString(serverAT, serverATStr);				cout << "ATCP is up\n";		cout << "Client AppleTalk address: " << clientATStr << "\n";		cout << "Peer AppleTalk address: " << serverATStr << "\n";	}	}// ---------------------------------------------------------------------------//		¥ PrintIPCPInfo() 	//			Gets and prints to console information about IPCP// ---------------------------------------------------------------------------void PrintIPCPInfo(DriverInterface * theDriver) {	long clientIP, serverIP,		 primDNS,  secDNS;		 	char clientIPStr[32], serverIPStr[32],		 primDNSStr[32],  secDNSStr[32];		 	if (theDriver->IsIPCPUp()) {		// Get IP address information		clientIP = theDriver->GetClientIP();		serverIP = theDriver->GetServerIP();		primDNS = theDriver->GetPrimaryDNS();		secDNS = theDriver->GetSecondaryDNS();				// Convert to printable format		IPtoString(clientIP, clientIPStr);		IPtoString(serverIP, serverIPStr);		IPtoString(primDNS, primDNSStr);		IPtoString(secDNS, secDNSStr);				cout << "IPCP is up\n";				if (theDriver->IsHeaderCompOn())			cout << "TCP header compression on\n";		else			cout << "TCP header compression off\n";				cout << "Client IP address: " << clientIPStr << "\n";		cout << "Server IP address: " << serverIPStr << "\n";		cout << "Primary DNS address: " << primDNSStr << "\n";		cout << "Secondary DNS address: " << secDNSStr << "\n";	}}// ---------------------------------------------------------------------------//		¥ PrintGeneralInfo() 	//			Gets and prints to console general information re: the connection// ---------------------------------------------------------------------------void PrintGeneralInfo(DriverInterface * theDriver) {	unsigned long numCharsIn,				  numCharsOut,				  numFramesIn,	 			  numFramesOut,				  numErrFramesIn,				  numIdleSeconds,				  numSecondsUp = 0;	if (theDriver->IsIPCPUp()) {		// Get other general statistical information		numCharsIn = theDriver->GetCharsIn();		numCharsOut = theDriver->GetCharsOut();		numFramesIn = theDriver->GetFramesIn();		numFramesOut = theDriver->GetFramesOut();		numErrFramesIn = theDriver->GetErrorFramesIn();		numIdleSeconds = theDriver->GetIdleSeconds();		numSecondsUp = theDriver->GetSecondsUp();				// Print it out		cout << "Characters in: " << numCharsIn << "\n";		cout << "Characters out: " << numCharsOut << "\n";		cout << "Frames in: " << numFramesIn << "\n";		cout << "Frames out: " << numFramesOut << "\n";		cout << "Error Frames in: " << numErrFramesIn << "\n";		cout << "Connection has been idle " << numIdleSeconds << " seconds\n";		cout << "Connection has been up " << numSecondsUp << " seconds\n";		cout << "\n";	}}