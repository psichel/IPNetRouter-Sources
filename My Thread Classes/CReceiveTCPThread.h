// ===========================================================================//	CReceiveTCPThread.h	©1997-2000 Sustainable Softworks. All rights reserved.// ===========================================================================//	Thread object to handle receive from a TCP endpoint//	Open a connection to the specified server port and loop to receive//	data until connection times out or is otherwise terminated.#pragma once#include "CObjectMaster.h"//#include <LThread.h>class LTCPEndpoint;class CReceiveTCPThread : 		public LThread {public:						CReceiveTCPThread(								CObjectMaster*		inObjectMaster,								LTCPEndpoint*		inNetworkEndpoint,								ConstStr255Param	inServerAddress,								UInt16				inServerPort);	virtual				~CReceiveTCPThread();	void				Bind(LInternetAddress&	inLocalAddress);	Boolean				IsConnected();	void				StartDisconnect();	void				Abort();	void				SetTimeout(UInt32 inTimeoutSeconds);		protected:	virtual void*		Run();	CObjectMaster* 		mObjectMaster;	LTCPEndpoint*		mEndpoint;					// network endpoint object	LInternetAddress	mLocalAddress;				// requested bind address	Str255				mServerAddressString;		// Address of server to use	UInt16				mServerPort;				// target port for query	UInt32				mTimeoutSeconds;			// time out for endpoint operations	Boolean				mStartDisconnect;	Boolean				mIsConnected;	OSStatus			mResult;};// define maximum transfer unitconst UInt32 kMaxTransferUnit = 2048;		// 2048 is larger than typical network MTU												