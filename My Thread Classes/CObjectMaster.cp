// ===========================================================================//	CObjectMaster.cp		й1997 Sustainable Softworks. All rights reserved.// ===========================================================================//	Encapsulates the idea of a master to call upon completion.////	Derived classes will typically create a set of threads to handle//	an OT network session.  These might include a thread for reading,//	writing, and name server lookups.//	//	CObjectMaster is an abstract base class (thus its constructor//	is declared protected).  Use one of the Derived Classes://		CPingTest//		CTraceRoute//		CWhoIsQuery//	To perform a the corresponding task.////	The purpose of this class is to allow a single thread class (CInetMapper)//	to be used by each of the derived classes by providing a common//	thread master to call upon completion.////	Added ReceiveData() method so derived classes can share CReceiveUDPThread()#include "CObjectMaster.h"// ===========================================================================#pragma mark еее CObjectMaster еее// ---------------------------------------------------------------------------//		е CObjectMaster					[protected]// ---------------------------------------------------------------------------//	ConstructorCObjectMaster::CObjectMaster(){}// ---------------------------------------------------------------------------//		е ~CObjectMaster// ---------------------------------------------------------------------------//	DestructorCObjectMaster::~CObjectMaster(){}// ---------------------------------------------------------------------------//		е Receive Data// ---------------------------------------------------------------------------//	Process data message received from networkvoidCObjectMaster::ReceiveData(LDataArrived* inMessage){#pragma unused (inMessage)}