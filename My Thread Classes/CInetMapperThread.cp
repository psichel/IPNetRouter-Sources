// ===========================================================================//	CInetMapperThread.cp	 й1997 Sustainable Softworks. All rights reserved.// ===========================================================================//	Thread object to perform DNS lookups#include "CInetMapperThread.h"#include <LInternetMapper.h>#include <LString.h>#include <PP_Networking.h>#include <LEditField.h>#include <UWindows.h>#include "CLogAction.h"#include "CNSLookupConst.h"// Globalsextern CLogAction*		gLogAction;// ===========================================================================#pragma mark еее CInetMapperThread еееCInetMapperThread::CInetMapperThread(	CObjectMaster*		inObjectMaster,	LWindow*			inWindow,	LInternetMapper*	inMapper,	UInt8				inLookupType)		: LThread(false, thread_DefaultStack, threadOption_Default, nil),		  mObjectMaster(inObjectMaster),		  mWindow(inWindow),		  mMapper(inMapper)		  {	mLookupType = inLookupType;	mAbortLookup = false;}// ---------------------------------------------------------------------------//		е ~CInetMapperThread// ---------------------------------------------------------------------------CInetMapperThread::~CInetMapperThread(){}// ---------------------------------------------------------------------------//		е AbortLookup// ---------------------------------------------------------------------------voidCInetMapperThread::AbortLookup(){	if (!mAbortLookup) {		mAbortLookup = true;		mMapper->AbortThreadOperation(this);	}}// ---------------------------------------------------------------------------//		е Run// ---------------------------------------------------------------------------void*CInetMapperThread::Run(){	UInt32		hostAddress;	LStr255		hostName;	LEditField	*addressField, *nameField;	mResult = kOTNoError;		// Get access to display fields	nameField = (LEditField*) mWindow->FindPaneByID( kHostNameField );	ThrowIfNil_(nameField);	addressField = (LEditField*) mWindow->FindPaneByID( kHostAddressField );	ThrowIfNil_(addressField);	// Lookup Name to Address?	if (mLookupType == kLookupNameToAddress) {		// get host name		nameField->GetDescriptor(hostName);		// tell user what we're doing		addressField->SetDescriptor("\pLooking...");				try {			// lookup and display the address			hostAddress = mMapper->NameToAddress(hostName);			addressField->SetValue(hostAddress);		}		catch (const LException& inErr) {			// handle other results			mResult = inErr.GetErrorCode();			if (mResult == Abort_Error) {				addressField->SetDescriptor("\pLookup aborted.");			}			else if (mResult == Timeout_Error) {				addressField->SetDescriptor("\pLookup timed out.");			}			else {				addressField->SetDescriptor("\pNo address found.");				gLogAction->LogText("\p\r### Lookup name to address failed with error code: ", mResult);			}		}	}	// Lookup Address to Name?	else if (mLookupType == kLookupAddressToName) {			// get server address		hostAddress = addressField->GetValue();		// tell user what we're doing		nameField->SetDescriptor("\pLooking...");				try {			// lookup and display the name			mMapper->AddressToName(hostAddress, hostName);			nameField->SetDescriptor(hostName);		}		catch (const LException& inErr) {			// handle other results			mResult = inErr.GetErrorCode();			if (mResult == Abort_Error) {				nameField->SetDescriptor("\pLookup aborted.");			}			else if (mResult == Timeout_Error) {				nameField->SetDescriptor("\pLookup timed out.");			}			else {				nameField->SetDescriptor("\pNo host name found.");				gLogAction->LogText("\p\r### Lookup address to name failed with error code: ", mResult);			}		}			catch(...) {		    SysBeep(30);		} 	}		SetResult(&mResult);	// set result so Object Master can retrieve it.	mObjectMaster->ObjectThreadDied(this);	return &mResult;}