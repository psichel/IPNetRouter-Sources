// ===========================================================================//	CObjectMaster.h		©1997 Sustainable Softworks. All rights reserved.// ===========================================================================#ifndef _H_CObjectMaster#define _H_CObjectMaster#pragma once#if PP_Uses_Pragma_Import	#pragma import on#endifPP_Begin_Namespace_PowerPlant#include <PP_Networking.h>#include <LThread.h>#include <UNetworkMessages.h>// ===========================================================================//		¥ CObjectMaster					[abstract]// ===========================================================================//	Encapsulates the idea of a master to call upon completion.////	Derived classes will typically create a set of threads to handle//	an OT network session.  These might include a thread for reading,//	writing, and name server lookups.//	//	CObjectMaster is an abstract base class (thus its constructor//	is declared protected).  Use one of the Derived Classes://		CPingTest//		CTraceRoute//		CWhoIsQuery//	To perform a the corresponding task.////	The purpose of this class is to allow a single thread class (CInetMapper)//	to be used by each of the derived classes by providing a common//	thread master to call upon completion.////	Added ReceiveData() method so derived classes can share CReceiveUDPThread()class CObjectMaster {public:	                        CObjectMaster();	virtual					~CObjectMaster();	virtual void			ReceiveData(LDataArrived* inMessage);	virtual void			ObjectThreadDied(LThread* inThread) = 0;private:};PP_End_Namespace_PowerPlant#if PP_Uses_Pragma_Import	#pragma import reset#endif#endif