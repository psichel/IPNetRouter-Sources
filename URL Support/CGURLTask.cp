// ===========================================================================//	CGURLTask.cp	 		©1996 Sustainable Softworks. All rights reserved.// ===========================================================================//	Class that steps through handling a GURL Apple Event asynchronously#include "CGURLTask.h"#include "MacSupport.h"#include "IPSupport.h"#include "CTraceRouteWindow.h"#include "CPingWindow.h"#include "CWhoIsWindow.h"#include "CFingerWindow.h"#include "CNSLookupWindow.h"#include "CMonitorWindow.h"#include "IPRouterCommon.h"//#include <LWindow.h>	// already included from above// ---------------------------------------------------------------------------//		¥ CGURLTask// ---------------------------------------------------------------------------//	ConstructorCGURLTask::CGURLTask(LCommander *inSuperCommander){	mSuperCommander = inSuperCommander;	mGURLPending = false;}// ---------------------------------------------------------------------------//		¥ ~CGURLTask// ---------------------------------------------------------------------------//	DestructorCGURLTask::~CGURLTask(){}// ---------------------------------------------------------------------------------//		¥ Start// ---------------------------------------------------------------------------------BooleanCGURLTask::Start(ConstStr255Param inURL){	UInt8			pos;	LStr255			str;	// make sure we're not already doing a GURL	if (mGURLPending) {		return false;	}	// initialize step number	mStepNumber = 1;	mGURLPending = true;	mURLAction = kURLnone;	// put URL in our LStr255 object to manipulate	mURLString.Assign(inURL);		// if URL begins "traceroute:" or "ping:" get host and invoke corresponding window	pos = mURLString.Find(':');	str.Assign(mURLString, 1, pos);	if ( ::EqualString(str, "\ptraceroute:", false, false) ) {	// caseSens, diacSens		mURLString.Assign(mURLString, 12);		mURLAction = kURLtraceroute;	} else if ( ::EqualString(str, "\pping:", false, false) ) {	// caseSens, diacSens		mURLString.Assign(mURLString, 6);		mURLAction = kURLping;	} else if ( ::EqualString(str, "\pwhois:", false, false) ) {	// caseSens, diacSens		mURLString.Assign(mURLString, 7);		mURLAction = kURLwhois;	} else if ( ::EqualString(str, "\pfinger:", false, false) ) {	// caseSens, diacSens		mURLString.Assign(mURLString, 8);		mURLAction = kURLfinger;	} else if ( ::EqualString(str, "\pnslookup:", false, false) ) {	// caseSens, diacSens		mURLString.Assign(mURLString, 10);		mURLAction = kURLnslookup;	} else {		Abort();		return false;	}	// is it a host name or IP address?	if ( mURLString.BeginsWith("\p//") &&		 ((mURLString[3] < '0') || ('9' < mURLString[3])) ) {		// begins //<non-digit>, get host name		mURLString.Assign(mURLString, 3);		pos = mURLString.Find('/');		if (pos == 0) pos = mURLString.Length() + 1;		mURLString.Assign(mURLString, 1, pos-1);	} else {		// it's an IP address		mURLAction += 1;		// remove "//" if present		if ( mURLString.BeginsWith("\p//") ) mURLString.Assign(mURLString, 3);	}		switch (mURLAction) {		case kURLtraceroute:		case kURLtracerouteAddress:			mURLWindow = InvokeWindow("\pTrace Route", rPPob_TraceRouteWindow, mSuperCommander);			break;		case kURLping:		case kURLpingAddress:			mURLWindow = InvokeWindow("\pTest Connectivity", rPPob_PingWindow, mSuperCommander);			break;		case kURLwhois:		case kURLwhoisAddress:			mURLWindow = InvokeWindow("\pWho Is", rPPob_WhoIsWindow, mSuperCommander);			break;		case kURLfinger:		case kURLfingerAddress:			mURLWindow = InvokeWindow("\pFinger", rPPob_FingerWindow, mSuperCommander);			break;		case kURLnslookup:		case kURLnslookupAddress:			mURLWindow = InvokeWindow("\pName Server Lookup", rPPob_NSLookupWindow, mSuperCommander);			break;	}	mURLWindow->Show();	// setup timer to invoke action	mStartTime = ::TickCount();	StartIdling();	return true;}// ---------------------------------------------------------------------------------//		¥ AbortGURL// ---------------------------------------------------------------------------------voidCGURLTask::Abort(){	// stop idling (testing for time outs to perform next step)	this->StopIdling();	mStepNumber = 0;	mGURLPending = false;}// ---------------------------------------------------------------------------//		¥ SpendTime// ---------------------------------------------------------------------------//	Periodical function to handle GURL action steps asynchronously.voidCGURLTask::SpendTime(const EventRecord &inMacEvent){#pragma unused (inMacEvent)	UInt32		timeStamp;	GrafPtr		theWindowP;	LWindow		*theWindow;	timeStamp = ::TickCount();	if ( ((timeStamp-mStartTime)>15) && (mStepNumber == 1) ) {		mStepNumber +=1;		// if there is a Monitor window, start monitoring		theWindowP = UWindows::FindNamedWindow("\pMonitor");		if (theWindowP != nil) {	// Does it exist?			// yes			theWindow = LWindow::FetchWindowObject(theWindowP);			((CMonitorWindow*)theWindow)->InvokeMonitor();		}	}	if ( ((timeStamp-mStartTime)>20) && (mStepNumber == 2) ) {		mStepNumber +=1;		// if there is a Monitor window, wait until it's ready		theWindowP = UWindows::FindNamedWindow("\pMonitor");		if (theWindowP != nil) {	// Does it exist?			// yes			theWindow = LWindow::FetchWindowObject(theWindowP);			if ( !((CMonitorWindow*)theWindow)->IsMonitoring() ) mStepNumber = 2;		}	}	// invoke URL	if ( ((timeStamp-mStartTime)>30) && (mStepNumber == 3) ) {		if (mURLAction == kURLtraceroute) {			((CTraceRouteWindow*)mURLWindow)->InvokeTraceName(mURLString);		} else if (mURLAction == kURLtracerouteAddress) {			((CTraceRouteWindow*)mURLWindow)->InvokeTraceAddress(mURLString);		} else if (mURLAction == kURLping) {			((CPingWindow*)mURLWindow)->InvokePingName(mURLString);		} else if (mURLAction == kURLpingAddress) {			((CPingWindow*)mURLWindow)->InvokePingAddress(mURLString);		} else if (mURLAction == kURLwhois) {			((CWhoIsWindow*)mURLWindow)->InvokeWhoIsName(mURLString);		} else if (mURLAction == kURLwhoisAddress) {			((CWhoIsWindow*)mURLWindow)->InvokeWhoIsName(mURLString);		} else if (mURLAction == kURLfinger) {			((CFingerWindow*)mURLWindow)->InvokeFingerName(mURLString);		} else if (mURLAction == kURLfingerAddress) {			((CFingerWindow*)mURLWindow)->InvokeFingerName(mURLString);		} else if (mURLAction == kURLnslookup) {			((CNSLookupWindow*)mURLWindow)->InvokeNSLookupName(mURLString);		} else if (mURLAction == kURLnslookupAddress) {			((CNSLookupWindow*)mURLWindow)->InvokeNSLookupName(mURLString);		}		Abort();	}}