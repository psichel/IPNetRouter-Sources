// ===========================================================================//	CArpData.h			©1999 Sustainable Softworks, All rights reserved.// ===========================================================================// Arp Data (corresponds to Arp window)#ifndef _H_CArpData#define _H_CArpData#pragma once#include <LArray.h>#include "MyTypes.h"#include "OTARPModule.h"// maximum size a corresponding text entry in config document#define kMaxArpSize	100#define kInterfaceNameDim	40		// size of InterfaceName// Arp Data Elementtypedef struct ArpEntry {	Str63	interfaceName;	UInt32	protocolAddr;	UInt32	protocolMask;	MACAddr_t	hardwareAddr;	UInt16	arpFlags;	Boolean	record;	Boolean	isDone;} ArpEntry_t;// Arp flag bit masksconst SInt16 kArpFlagNone				= 0;const SInt16 kArpFlagPermanent			= ACE_F_PERMANENT;const SInt16 kArpFlagPublish			= ACE_F_PUBLISH;const SInt16 kArpFlagMapping			= ACE_F_MAPPING;const Str31 kArpFlagPermanentStr	= "\ppermanent";const Str31 kArpFlagPublishStr		= "\ppublish";const Str31 kArpFlagMappingStr		= "\pmapping";#include "CSignalDataEvent.h"class	CArpData : public CSignalDataEvent {public:					CArpData();	virtual			~CArpData();	void			Init();	SInt32			MatchArpEntry(ArpEntry_t* inArpEntry1, ArpEntry_t* inArpEntry2);	StringPtr		ArpEntryToString(ArpEntry_t* inEntry, Str255 outStr);	void			SetDataArpEntry(ArpEntry_t* inEntry);	void			GetDataArpEntry(ArpEntry_t* outEntry);		ArrayIndexT		SetDataArpArray(ArrayIndexT index, ArpEntry_t* inEntry);	Boolean			GetDataArpArray(ArrayIndexT index, ArpEntry_t* outEntry);	ArrayIndexT		GetDataCount();	ArrayIndexT		SetDataCount(ArrayIndexT count);	void			SignalDataChange();				private:	LArray*				mArpArray;	ArpEntry_t			mArpEntry;	};// constants for signalling what data has changedconst SInt16 kArpData				= 'a';#define kDataChange	1const SInt16 kDataArpEntry			= 2;const SInt16 kDataArpCount			= 3;	// count of elements in arrayconst SInt16 kDataArpArrayOffset	= 3;	// use offset+1..n#endif