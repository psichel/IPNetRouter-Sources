// ===========================================================================//	CPortMapData.h			©1998 Sustainable Softworks, All rights reserved.// ===========================================================================// Port Mapping data (corresponds to Port Mapping window)#ifndef _H_CPortMapData#define _H_CPortMapData#pragma once#include <LArray.h>	// maximum size a corresponding text entry in config document#define kMaxPortMapSize	60#include "MyTypes.h"	// pick up PortMapEntry_t#include "CInterfacesData.h"	// pick up InterfaceEntry_t#include "CSignalDataEvent.h"class	CPortMapData : public CSignalDataEvent {public:					CPortMapData();	virtual			~CPortMapData();	void			Init();	void			SignalDataChange();	Boolean			MatchPortMapEntry(PortMapEntry_t* inEntry1, PortMapEntry_t* inEntry2);	ArrayIndexT		FindMatchPortMapEntry(PortMapEntry_t* inEntry);	StringPtr		PortMapEntryToString(PortMapEntry_t* inEntry, Str255 outStr);	void			SetDataPortMapEntry(PortMapEntry_t* inEntry);	void			GetDataPortMapEntry(PortMapEntry_t* outEntry);		ArrayIndexT		SetDataPortMapArray(ArrayIndexT index, PortMapEntry_t* inEntry);	Boolean			GetDataPortMapArray(ArrayIndexT index, PortMapEntry_t* outEntry);	Boolean			RemoveDataPortMapArray(ArrayIndexT index);	ArrayIndexT		GetDataCount();	ArrayIndexT		SetDataCount(ArrayIndexT count);		void			SetDataPortMapHash(UInt32 inValue);				UInt32			GetDataPortMapHash();	void			SetDataNATaddress(UInt32 inValue);	UInt32			GetDataNATaddress();	Boolean			FindCurrentNATinterface(InterfaceEntry_t*	outEntry);		void			SetDataPermanentOnly(Boolean inValue);				Boolean			GetDataPermanentOnly();		ArrayIndexT		GetDataPermanentCount();	CPortMapData*	mPortMapData;	// temporary copy used during restore	private:	LArray*			mPortMapArray;	PortMapEntry_t	mPortMapEntry;	UInt32			mPortMapHash;	// hashed port name for current NAT	UInt32			mNATaddress;	// current NAT address	Boolean			mPermanentOnly;};const SInt16 kPortMapData				= 'p';#define kDataChange	1const SInt16 kDataPortMapEntry			= 2;const SInt16 kDataPortMapCount			= 3;	// count of elements in arrayconst SInt16 kDataPortMapPermanentOnly	= 4;const SInt16 kDataPortMapHash			= 5;	// current NAT portconst SInt16 kDataNATaddress			= 6;	// current NAT addressconst SInt16 kDataPortMapArrayOffset	= 6;	// use offset+1..n// Values for NAT entry Flags#define kFlagPermanent			1		// entry is permanent and cannot be aged out#define kFlagFINLocal			2		// Seen TCP FIN from local host#define kFlagFINPeer			4		// Seen TCP FIN from peer#define kFlagActive				8		// Entry contains valid data#define kFlagStatic				0x10	// Apparent EP is static#define kFlagNoRestore			0x20	// Don't restore this entry#define kFlagDNSForwarding		0x40	// DNS Forwarding Entry#define kFlagWamnet				0x0100	// WAM!NET private// values for entry to stringconst Str31 kFlagPermanentStr		= "\pperm";const Str31 kFlagStaticStr			= "\pstatic";const Str31 kFlagNoRestoreStr		= "\pnoRestore";const Str31 kFlagDNSForwardingStr	= "\pdnsForwarding";#endif