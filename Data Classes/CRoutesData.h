// ===========================================================================//	CRoutesData.h			©1998 Sustainable Softworks, All rights reserved.// ===========================================================================// Routes data (corresponds to routes window)#ifndef _H_CRoutesData#define _H_CRoutesData#pragma once#include <LArray.h>	// maximum size a corresponding text entry in config document#define kMaxRouteSize	50// Route Data Elementtypedef struct RouteEntry {	UInt32	mentatIRE;	UInt32	routeType;	UInt32	destination;	UInt32	netMask;	UInt32	gateway;	Str63	interfaceName;	Boolean	addRoute;	Boolean wamnet;	Boolean	isDone;} RouteEntry_t;#include "CSignalDataEvent.h"class	CRoutesData : public CSignalDataEvent {public:					CRoutesData();	virtual			~CRoutesData();	void			Init();	void			SignalDataChange();	SInt32			MatchRouteInConfig(						RouteEntry_t*	inRouteEntry,						CRoutesData*	inRouteConfig,						RouteEntry_t*	outRouteEntry);	SInt32			MatchRouteEntry(RouteEntry_t* inRouteEntry1, RouteEntry_t* inRouteEntry2);	StringPtr		RouteEntryToString(RouteEntry_t* inEntry, Str255 outStr);	void			SetDataRouteEntry(RouteEntry_t* inEntry);	void			GetDataRouteEntry(RouteEntry_t* outEntry);		ArrayIndexT		SetDataRoutesArray(ArrayIndexT index, RouteEntry_t* inEntry);	Boolean			GetDataRoutesArray(ArrayIndexT index, RouteEntry_t* outEntry);	ArrayIndexT		GetDataCount();	ArrayIndexT		SetDataCount(ArrayIndexT count);	CRoutesData*	mRoutesData;	private:	LArray*			mRoutesArray;	RouteEntry_t	mRouteEntry;	};const SInt16 kRoutesData				= 'r';#define kDataChange	1const SInt16 kDataRouteEntry			= 2;const SInt16 kDataRoutesCount		    = 3;	// count of elements in arrayconst SInt16 kDataRoutesArrayOffset 	= 3;	// use offset+1..n#endif