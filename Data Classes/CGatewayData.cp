// ===========================================================================//	CGatewayData.cp			©1998 Sustainable Softworks, All rights reserved.// ===========================================================================// General gateway data (corresponds to gateway window)#include "CGatewayData.h"#include "CIPRouterApp.h"// Globalsextern UInt8				gApplicationMode;// ---------------------------------------------------------------------------------//		¥ CGatewayData	[Constructor]// ---------------------------------------------------------------------------------CGatewayData::CGatewayData(){	// set defaults	mIPforwarding = kForwardingNever;	mUponOpen = kConfigureDisplay;	mExposedHost = kExposedHostDefault;	mExposedHostAddress = 0;	mRemainConnected = false;	mExcludeFromNAT = false;	mExcludeNet.address = 0;	mExcludeNet.mask = 0;	mDisconnectAtQuit = false;	mShowPPPdialogs = false;	mEnableLocalNAT = false;	if (gApplicationMode & kModeApple) mDNSForwarding = true;	else mDNSForwarding = false;	mLimitMTUForPPPoE = true;	mTRCableModem = false;	mDialOnDemand = true;	mAddOnly = false;	mDialupDNS = false;	mDialupUsername[0] = 0;	mDialupPassword[0] = 0;}// ---------------------------------------------------------------------------------//		¥ ~CGatewayData	[Destructor]// ---------------------------------------------------------------------------------CGatewayData::~CGatewayData(){}#pragma mark --- Accessors ---// ---------------------------------------------------------------------------------//		¥ SignalDataChange// ---------------------------------------------------------------------------------// Used to tell our document when data has changedvoidCGatewayData::SignalDataChange(){	SignalDataEvent( DATA_ID(kGatewayData, kDataChange) );}// ---------------------------------------------------------------------------------//		¥ SetDataIPfowarding// ---------------------------------------------------------------------------------voidCGatewayData::SetDataIPforwarding(UInt8 inValue){	if (inValue != mIPforwarding) {		mIPforwarding = inValue;		SignalDataEvent( DATA_ID(kGatewayData, kDataIPforwarding) );	}}UInt8CGatewayData::GetDataIPforwarding()		{ return mIPforwarding; }// ---------------------------------------------------------------------------------//		¥ SetDataUponOpen// ---------------------------------------------------------------------------------voidCGatewayData::SetDataUponOpen(UInt8 inValue){	if (inValue != mUponOpen) {		mUponOpen = inValue;		SignalDataEvent( DATA_ID(kGatewayData, kDataUponOpen) );	}}UInt8CGatewayData::GetDataUponOpen()			{ return mUponOpen; }// ---------------------------------------------------------------------------------//		¥ SetDataExposedHost// ---------------------------------------------------------------------------------voidCGatewayData::SetDataExposedHost(UInt8 inValue){	if (inValue != mExposedHost) {		mExposedHost = inValue;		SignalDataEvent( DATA_ID(kGatewayData, kDataExposedHost) );	}}UInt8CGatewayData::GetDataExposedHost()			{ return mExposedHost; }// ---------------------------------------------------------------------------------//		¥ SetDataExposedHostAddress// ---------------------------------------------------------------------------------voidCGatewayData::SetDataExposedHostAddress(UInt32 inValue){	if (inValue != mExposedHostAddress) {		mExposedHostAddress = inValue;		SignalDataEvent( DATA_ID(kGatewayData, kDataExposedHostAddress) );	}}UInt32CGatewayData::GetDataExposedHostAddress()			{ return mExposedHostAddress; }// ---------------------------------------------------------------------------------//		¥ SetDataDialOnDemand// ---------------------------------------------------------------------------------voidCGatewayData::SetDataDialOnDemand(Boolean inValue){	if (inValue != mDialOnDemand) {		mDialOnDemand = inValue;		SignalDataEvent( DATA_ID(kGatewayData, kDataDialOnDemand) );	}}BooleanCGatewayData::GetDataDialOnDemand(){	return mDialOnDemand;}// ---------------------------------------------------------------------------------//		¥ SetDataRemainConnected// ---------------------------------------------------------------------------------voidCGatewayData::SetDataRemainConnected(Boolean inValue){	if (inValue != mRemainConnected) {		mRemainConnected = inValue;		SignalDataEvent( DATA_ID(kGatewayData, kDataRemainConnected) );	}}BooleanCGatewayData::GetDataRemainConnected(){	return mRemainConnected;}// ---------------------------------------------------------------------------------//		¥ SetDataDisconnectAtQuit// ---------------------------------------------------------------------------------voidCGatewayData::SetDataDisconnectAtQuit(Boolean inValue){	if (inValue != mDisconnectAtQuit) {		mDisconnectAtQuit = inValue;		SignalDataEvent( DATA_ID(kGatewayData, kDataDisconnectAtQuit) );	}}BooleanCGatewayData::GetDataDisconnectAtQuit(){	return mDisconnectAtQuit;}// ---------------------------------------------------------------------------------//		¥ SetDataShowPPPdialogs// ---------------------------------------------------------------------------------voidCGatewayData::SetDataShowPPPdialogs(Boolean inValue){	if (inValue != mShowPPPdialogs) {		mShowPPPdialogs = inValue;		SignalDataEvent( DATA_ID(kGatewayData, kDataShowPPPdialogs) );	}}BooleanCGatewayData::GetDataShowPPPdialogs(){	return mShowPPPdialogs;}// ---------------------------------------------------------------------------------//		¥ SetDataEnableLocalNAT// ---------------------------------------------------------------------------------voidCGatewayData::SetDataEnableLocalNAT(Boolean inValue){	if (inValue != mEnableLocalNAT) {		mEnableLocalNAT = inValue;		SignalDataEvent( DATA_ID(kGatewayData, kDataEnableLocalNAT) );	}}BooleanCGatewayData::GetDataEnableLocalNAT(){	return mEnableLocalNAT;}// ---------------------------------------------------------------------------------//		¥ SetDataDNSForwarding// ---------------------------------------------------------------------------------voidCGatewayData::SetDataDNSForwarding(Boolean inValue){	if (inValue != mDNSForwarding) {		mDNSForwarding = inValue;		SignalDataEvent( DATA_ID(kGatewayData, kDataDNSForwarding) );	}}BooleanCGatewayData::GetDataDNSForwarding(){	return mDNSForwarding;}// ---------------------------------------------------------------------------------//		¥ SetDataLimitMTUForPPPoE// ---------------------------------------------------------------------------------voidCGatewayData::SetDataLimitMTUForPPPoE(Boolean inValue){	if (inValue != mLimitMTUForPPPoE) {		mLimitMTUForPPPoE = inValue;		SignalDataEvent( DATA_ID(kGatewayData, kDataLimitMTUForPPPoE) );	}}BooleanCGatewayData::GetDataLimitMTUForPPPoE(){	return mLimitMTUForPPPoE;}// ---------------------------------------------------------------------------------//		¥ SetDataTRCableModem// ---------------------------------------------------------------------------------voidCGatewayData::SetDataTRCableModem(Boolean inValue){	if (inValue != mTRCableModem) {		mTRCableModem = inValue;		SignalDataEvent( DATA_ID(kGatewayData, kDataTRCableModem) );	}}BooleanCGatewayData::GetDataTRCableModem(){	return mTRCableModem;}// ---------------------------------------------------------------------------------//		¥ SetDataExcludeFromNAT// ---------------------------------------------------------------------------------voidCGatewayData::SetDataExcludeFromNAT(Boolean inValue){	if (inValue != mExcludeFromNAT) {		mExcludeFromNAT = inValue;		SignalDataEvent( DATA_ID(kGatewayData, kDataExcludeFromNAT) );	}}BooleanCGatewayData::GetDataExcludeFromNAT(){	return mExcludeFromNAT;}// ---------------------------------------------------------------------------------//		¥ SetDataExcludeNet// ---------------------------------------------------------------------------------voidCGatewayData::SetDataExcludeNet(NetNumber_t* inNet){	if ((inNet->address != mExcludeNet.address) || (inNet->mask != mExcludeNet.mask)) {		mExcludeNet.address = inNet->address;		mExcludeNet.mask = inNet->mask;		SignalDataEvent( DATA_ID(kGatewayData, kDataExcludeNet) );	}}voidCGatewayData::GetDataExcludeNet(NetNumber_t* outNet){	outNet->address = mExcludeNet.address;	outNet->mask    = mExcludeNet.mask;}// ---------------------------------------------------------------------------------//		¥ SetDataAddOnly// ---------------------------------------------------------------------------------voidCGatewayData::SetDataAddOnly(Boolean inValue){	if (inValue != mAddOnly) {		mAddOnly = inValue;		SignalDataEvent( DATA_ID(kGatewayData, kDataAddOnly) );	}}BooleanCGatewayData::GetDataAddOnly(){	return mAddOnly;}// ---------------------------------------------------------------------------------//		¥ SetDataDialupDNS// ---------------------------------------------------------------------------------voidCGatewayData::SetDataDialupDNS(Boolean inValue){	if (inValue != mDialupDNS) {		mDialupDNS = inValue;		SignalDataEvent( DATA_ID(kGatewayData, kDataDialupDNS) );	}}BooleanCGatewayData::GetDataDialupDNS(){	return mDialupDNS;}// ---------------------------------------------------------------------------------//		¥ SetDataDialupUsername// ---------------------------------------------------------------------------------voidCGatewayData::SetDataDialupUsername(Str255 inUsername){	if (!::EqualString(inUsername, mDialupUsername, true, false)) {		LString::CopyPStr(inUsername, mDialupUsername);		SignalDataEvent( DATA_ID(kGatewayData, kDataDialupUsername) );	}}StringPtrCGatewayData::GetDataDialupUsername(Str255 outStr){	return LString::CopyPStr(mDialupUsername, outStr);}// ---------------------------------------------------------------------------------//		¥ SetDataDialupPassword// ---------------------------------------------------------------------------------voidCGatewayData::SetDataDialupPassword(Str255 inPassword){	if (!::EqualString(inPassword, mDialupPassword, true, false)) {		LString::CopyPStr(inPassword, mDialupPassword);		SignalDataEvent( DATA_ID(kGatewayData, kDataDialupPassword) );	}}StringPtrCGatewayData::GetDataDialupPassword(Str255 outStr){	return LString::CopyPStr(mDialupPassword, outStr);}