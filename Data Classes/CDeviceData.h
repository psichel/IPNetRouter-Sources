// ===========================================================================//	CDeviceData.h			©1998 Sustainable Softworks, All rights reserved.// ===========================================================================// Device data#ifndef _H_CDeviceData#define _H_CDeviceData#pragma once#include <LArray.h>#include <OpenTptClient.h>// data element to hold device information from OT Port Registrystruct DeviceEntry {	Str63		portName;	Str63		interfaceName;	Str63		userPortName;	StreamRef	ipLinkStream;	StreamRef	arpLinkStream;	UInt16		deviceType;	Boolean		needArp;	Boolean		needPPP;	Boolean		isMacIP;};typedef struct DeviceEntry DeviceEntry_t;const SInt16 kDeviceInfoDim	= 32;	// max number of Device Info records#include "CSignalDataEvent.h"class	CDeviceData : public CSignalDataEvent {public:					CDeviceData();	virtual			~CDeviceData();	void			Init();		ArrayIndexT		SetDataDeviceArray(ArrayIndexT index, DeviceEntry_t* inEntry);	Boolean			GetDataDeviceArray(ArrayIndexT index, DeviceEntry_t* outEntry);	ArrayIndexT		GetDataCount();		// read only		void			LoadDataDeviceArray();	void			DeleteEntryDeviceArray(ArrayIndexT index);	Boolean			AnyNewInterfaces();	ArrayIndexT		FindDataDeviceArray(Str63 inUserPortName, Str63 inPortName,							Str63 inInterfaceName, DeviceEntry_t* outEntry);	ArrayIndexT		HashFindDataDeviceArray(UInt32 hashedName, DeviceEntry_t* outEntry);	private:	LArray*			mDeviceArray;		};const SInt16 kDeviceData				= 'd';const SInt16 kDataArrayLoaded			= 1;	// signal device data loadedconst SInt16 kDataDeviceArrayOffset	    = 1;	// use offset+1..n// Interface naming convention for mlPPPconst Str31 kMLPPPName			        ="\pmlPPP";#endif