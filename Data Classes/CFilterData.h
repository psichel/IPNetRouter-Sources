// ===========================================================================//	CFilterData.h			©1998 Sustainable Softworks, All rights reserved.// ===========================================================================// Filter data (corresponds to filter window)#ifndef _H_CFilterData#define _H_CFilterData#pragma once#include <LArray.h>	// maximum size a corresponding text entry in config document#define kMaxFilterSize	60#include "MyTypes.h"	// pick up FilterEntry_t#include "CSignalDataEvent.h"class	CFilterData : public CSignalDataEvent {public:					CFilterData();	virtual			~CFilterData();	void			Init();	void			SignalDataChange();	Boolean			EqualFilterEntry(FilterEntry_t* inEntry1, FilterEntry_t* inEntry2);	StringPtr		FilterEntryToString(FilterEntry_t* inEntry, Str255 outStr);	void			SetDataFilterEntry(FilterEntry_t* inEntry);	void			GetDataFilterEntry(FilterEntry_t* outEntry);		ArrayIndexT		SetDataFilterArray(ArrayIndexT index, FilterEntry_t* inEntry);	Boolean			GetDataFilterArray(ArrayIndexT index, FilterEntry_t* outEntry);	ArrayIndexT		GetDataCount();	ArrayIndexT		SetDataCount(ArrayIndexT count);	CFilterData*	mFilterData;	private:	LArray*			mFilterArray;	FilterEntry_t	mFilterEntry;		};const SInt16 kFilterData				= 'f';#define kDataChange	1const SInt16 kDataFilterEntry			= 2;const SInt16 kDataFilterCount			= 3;	// count of elements in arrayconst SInt16 kDataFilterArrayOffset	    = 3;	// use offset+1..n// flags for Filter entry#define kFlagDirectionRead	0x01	// 0=write, 1=read#define kFlagActionMask 	0x0E	// 0=pass, 1=reject, 2=no dial, 3=trigger, 4=log//#define kFlagAddressSource	0x04	// 0=dest,	1=source#define kFlagFilterActive	0x0200	// 0=deleted, 1=active#define kFlagAck			0x10#define kFlagNoAck			0x20#define kFlagDone           0x80#define kFlagWamnet			0x0100// What to do with datagram#define kFilterPass			0#define kFilterReject		1#define kFilterNoDial		2#define kFilterTrigger      3#define kFilterLog			4#endif