// ===========================================================================//	CIPTable.h				©1996 Sustainable Softworks. All rights reserved.//							Based on LTable class//							©1993 Metrowerks, Inc. All rights reserved.// ===========================================================================#pragma once#include <LTable.h>#include <LDragAndDrop.h>#include "IPRouterCommon.h"const kIPTableIPEditField		= 1010;const kIPTableEditField			= 1011;const kIPTablePopupMenu			= 1012;// Column display typestypedef unsigned char ColType;const ColType kColumnNone		= 0;const ColType kColumnStatus		= 1;const ColType kColumnIPNum		= 2;const ColType kColumnNum		= 3;const ColType kColumnFeature	= 4;const ColType kColumnComment	= 5;const ColType kColumnProtocol	= 6;// Column processing optionsconst ColType kOptionNone		= 0;const ColType kOptionMenu		= 1;const ColType kOptionMax15		= 2;const ColType kOptionDefaultRoute = 3;const ColType kOptionReadOnly	= 4;// Column widthsconst UInt8 kWidthFeature		= 23;const UInt8 kWidthIPNum			= 88;const UInt8 kWidthNum			= 36;const UInt8 kWidthMenu			= 16;const UInt8 kWidthComment		= 121;const UInt8 kWidthScrollBar		= 15;const UInt8 kWidthProtocol		= 26;// Hilite Stylesconst UInt8 kHiliteNone			= 0;const UInt8 kHiliteSelect		= 1;const UInt8 kHiliteEdit			= 2;const UInt8 kHiliteInactive		= 3;const kCommentDataSize			= 32;	// max number of comment characters allowed per entryclass	CIPTable : public LTable, public LDragAndDrop,				   public LBroadcaster {public:	enum { class_ID = 'CIPt' };	static CIPTable*	CreateIPTableStream(LStream *inStream);					CIPTable(LStream *inStream);	virtual			~CIPTable();	void			SetIPEditField( LEditField *inEditField );	void			SetEditField( LEditField *inEditField );	void			SetPopupMenu( LStdPopupMenu *inPopupMenu );	void			SetCommentDataSize(Int32 inCommentDataSize);	void			SetColType(Int32 inHowMany, TableIndexT inAfterCol,								ColType inType, ColType inOption);	void			GetColType(TableIndexT inCol, ColType &outType, ColType &outOption);	virtual void	InsertRows(Int32 inHowMany, TableIndexT inAfterRow,								void *inCellData);	virtual void	RemoveRows(Int32 inHowMany, TableIndexT inFromRow);	virtual void	InsertCols(Int32 inHowMany, TableIndexT inAfterCol,								void *inCellData);	virtual void	RemoveCols(Int32 inHowMany, TableIndexT inFromCol);	virtual void	SetColWidth(Int16 inWidth, TableIndexT inFrom,									TableIndexT inTo);	Int16			GetColWidth( TableIndexT inCol );	virtual void	SelectCell(const TableCellT &inCell);	void			ToggleCell();	void			AddRow();	Boolean			InEditCell();	Boolean			AdjustView(const TableCellT &inCell);	void			RefreshCell(const TableCellT &inCell);	void			RefreshRow(const TableIndexT &inRow);	void			EditOK();	void			EditCancel();	void			Click(SMouseDownEvent	&inMouseDown);protected:	Int32			mMultiColWidth[kMaxCols+1];	LArray			*mCommentData;	virtual void	DrawCell(const TableCellT &inCell);		virtual Boolean	FetchLocalCellFrame(const TableCellT &inCell,									Rect &outCellFrame);	virtual Boolean	FetchLocalContentFrame(const TableCellT &inCell,									Rect &outCellFrame);	virtual void	FetchCellHitBy(const SPoint32 &inImagePt,									TableCellT &outCell);		virtual void	HiliteCell(const TableCellT &inCell);	virtual void	UnhiliteCell(const TableCellT &inCell);	virtual void	ClickCell(const TableCellT &inCell,							  const SMouseDownEvent &inMouseDown);	void			ActivateSelf();	void			EditCell();	void			MenuCell();	Boolean				ItemIsAcceptable(							DragReference	inDragRef,							ItemReference	inItemRef );	void				EnterDropArea(							DragReference	inDragRef,							Boolean			inDragHasLeftSender );	void				LeaveDropArea(DragReference	inDragRef );	void				InsideDropArea(DragReference	inDragRef );	void				FocusDropArea();	void				HiliteDropArea(DragReference	inDragRef );	void				UnhiliteDropArea(DragReference	inDragRef );	void				ReceiveDragItem(							DragReference	inDragRef,							DragAttributes	inDragAttrs,							ItemReference	inItemRef,							Rect			&inItemBounds );private:	void			InitTable(Int32 inNumberOfRows, Int32 inNumberOfCols,							Int32 inRowHeight, Int32 inColWidth,							Int32 inCellDataSize);								void			ApplyForeAndBackColors();										LEditField 		*mIPEditField;	LEditField		*mEditField;	LStdPopupMenu	*mPopupMenu;	TableCellT		mEditCell;		// cell being edited if any	TableCellT		mDropCell;		// the cell to receive a Drag and Drop	UInt8			mHiliteStyle;	// remember hilite style for undo};	struct IPNumItem {	Int32	a;	Int32	b;};typedef struct IPNumItem IPNumItem;struct DisplayItem {	unsigned char	a[4];	unsigned char	b[4];};typedef struct DisplayItem DisplayItem;