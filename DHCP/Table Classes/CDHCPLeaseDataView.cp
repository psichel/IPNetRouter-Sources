// =================================================================================//	CDHCPLeaseDataView.cp				©1999 Sustainable Softworks All rights reserved.// =================================================================================//	Table object to display DHCP Status information#include "CDHCPLeaseDataView.h"#include "CWindow.h"#include <PP_Messages.h>#include "AGAColors.h"#include "IPSupport.h"#include "MacSupport.h"#include "CInterfacesData.h"#include "CDHCPWindow.h"#include <LStdControl.h>#include "CIPNumberEditField.h"#include "CIPNumberListField.h"#include "CEditField.h"#include <LString.h>#include "CDHCPData.h"#include "CDeviceData.h"#include "CGatewayData.h"// Globalsextern CDHCPData* gDHCPData;extern CInterfacesData*	gInterfacesData;// ---------------------------------------------------------------------------------//		¥ CDHCPLeaseDataView(LStream*)// ---------------------------------------------------------------------------------CDHCPLeaseDataView::CDHCPLeaseDataView(	LStream	*inStream )		: LView( inStream ){	mDisplayRow = 1;	mWindow = nil;}// ---------------------------------------------------------------------------------//		¥ ~CDHCPLeaseDataView// ---------------------------------------------------------------------------------CDHCPLeaseDataView::~CDHCPLeaseDataView(){}// ---------------------------------------------------------------------------------//		¥ FinishCreateSelf// ---------------------------------------------------------------------------------//	Finish creating the DHCP table.voidCDHCPLeaseDataView::FinishCreateSelf(){	// Link the window (the listener) with the controls in	// the window (the broadcasters).	UReanimator::LinkListenerToControls(		(CDHCPLeaseDataView *)this, this, rPPob_LeaseOptionsPanel );	// find our display objects	mServerAddrPopup = (LStdPopupMenu*)FindPaneByID( kServerAddrPopup );	ThrowIfNil_(mServerAddrPopup);	mLeaseEnable = (LStdCheckBox*)FindPaneByID( kLeaseEnable );	ThrowIfNil_(mLeaseEnable);	mLeaseNetInterface = (CIPNumberEditField*)FindPaneByID( kLeaseNetInterface );	ThrowIfNil_(mLeaseNetInterface);	mLeaseNetMask = (CIPNumberEditField*)FindPaneByID( kLeaseNetMask );	ThrowIfNil_(mLeaseNetMask);	mLeaseRouters = (CIPNumberListField*)FindPaneByID( kLeaseRouters );	ThrowIfNil_(mLeaseRouters);	mLeaseNameServers = (CIPNumberListField*)FindPaneByID( kLeaseNameServers );	ThrowIfNil_(mLeaseNameServers);	mLeaseDefaultTime = (CEditField*)FindPaneByID( kLeaseDefaultTime );	ThrowIfNil_(mLeaseDefaultTime);	mLeaseDefaultUnits = (LStdPopupMenu*)FindPaneByID( kLeaseDefaultUnits );	ThrowIfNil_(mLeaseDefaultUnits);	mLeaseMaxTime = (CEditField*)FindPaneByID( kLeaseMaxTime );	ThrowIfNil_(mLeaseMaxTime);	mLeaseMaxUnits = (LStdPopupMenu*)FindPaneByID( kLeaseMaxUnits );	ThrowIfNil_(mLeaseMaxUnits);	mLeaseDomainName = (CEditField*)FindPaneByID( kLeaseDomainName );	ThrowIfNil_(mLeaseDomainName);	// update display	UpdateView(1);	// get Server Address Popup	mServerAddrPopup = (LStdPopupMenu*)this->FindPaneByID( kServerAddrPopup );	ThrowIfNil_(mServerAddrPopup);	// load menu and set default	LoadServerAddrPopup();	mServerAddrPopup->SetValue(0);	// show default value	mServerAddrPopup->SetValue(1);		// listen to Network Interface popup//	mServerAddrPopup->AddListener(this);}// ---------------------------------------------------------------------------//		¥ Load Server Address Popup// ---------------------------------------------------------------------------//	Scan DHCP data to load the Server Address popup.shortCDHCPLeaseDataView::LoadServerAddrPopup(){	MenuHandle			theMenuH;	short				num;	short				index, menuIndex;//	short				j;//	InterfaceEntry_t	interfaceEntry;	DHCPLeaseDataEntry_t leaseEntry;	UInt32				addrList[kMaxInterfaces];	Str31				str;//	Boolean				isDup;	mServerAddrPopup->FocusDraw();	theMenuH = mServerAddrPopup->GetMacMenuH();	if (theMenuH) {		// remove any previous menu items		num = ::CountMItems(theMenuH);		for (index=num; index>0; index--) {			::DeleteMenuItem(theMenuH, index);		}		// walk through lease data to append any items		menuIndex = 1;		index = 1;		while ( gDHCPData->GetDataDHCPLeaseDataArray(index, &leaseEntry) ) {			// append IP address to Server Address menu			::AppendMenu(theMenuH, "\pDummy");	// do this to allow special chars			IP_NumToStr(leaseEntry.interfaceAddr, str);			::SetMenuItemText(theMenuH, menuIndex, str);			addrList[menuIndex] = leaseEntry.interfaceAddr;			// advance			menuIndex += 1;			index += 1;		}/*		// walk through interface data to append any new items		index = 2;		while ( gInterfacesData->GetDataInterfacesArray(index, &interfaceEntry) ) {			// skip duplicates			isDup = false;			for (j=1; j<menuIndex; j++) {				if (addrList[j] == interfaceEntry.interfaceAddr) {					isDup = true;					break;				}			}			if (!isDup) {				// append IP address to Server Address menu				::AppendMenu(theMenuH, "\pDummy");	// do this to allow special chars				IP_NumToStr(interfaceEntry.interfaceAddr, str);				::SetMenuItemText(theMenuH, menuIndex, str);				addrList[menuIndex] = leaseEntry.interfaceAddr;				// advance				menuIndex += 1;			}			index += 1;		}*/		::AppendMenu(theMenuH, "\p-");		::AppendMenu(theMenuH, "\pNew");		::AppendMenu(theMenuH, "\pDelete");	}	// count how many items we got and set max value	mServerAddrPopupMax = ::CountMItems(theMenuH);	mServerAddrPopup->SetMaxValue(mServerAddrPopupMax);		return mServerAddrPopupMax;}// ---------------------------------------------------------------------------------//		¥ ListenToMessage// ---------------------------------------------------------------------------------voidCDHCPLeaseDataView::ListenToMessage(	MessageT	inMessage,	void		*ioParam ){	MenuHandle			theMenuH;	short				howMany;	short				item;	ArrayIndexT			leaseDataCount;	Str31				str;	DHCPLeaseDataEntry_t	ldEntry;	switch ( inMessage ) {		case kServerAddrPopup:			// Network Interface Popup			theMenuH = mServerAddrPopup->GetMacMenuH();			if (theMenuH) {				// Get the menu item and text				item = mServerAddrPopup->GetValue();				::GetMenuItemText( theMenuH, item, str );				// get how many items there are				howMany = ::CountMItems(theMenuH);				leaseDataCount = gDHCPData->GetDataCountDHCPLeaseData();				// if user picked an address, change current display row				if (item <= howMany-3) {					UpdateView(item);					// if no lease data for this address					if (item > leaseDataCount) {						// set row to last+1						mDisplayRow = leaseDataCount + 1;						// display address the user selected						mLeaseNetInterface->SetDescriptor(str);						SetupDefaults();					}				}				// if user picked new, create a new row				else if (item == howMany-1) {					// set row to last+1					mDisplayRow = leaseDataCount + 1;					// display address 0.0.0.0					mLeaseNetInterface->SetValue(0);				}				// if user picked delete,...				else if (item == howMany) {					if (mDisplayRow <= leaseDataCount) {						gDHCPData->RemoveDataDHCPLeaseDataArray(mDisplayRow);						LoadServerAddrPopup();						UpdateView(mDisplayRow);					}				}			}			break;		case kDHCPApplyButton:			GetDHCPLeaseDataEntry(mDisplayRow, &ldEntry);			gDHCPData->SetDataDHCPLeaseDataArray(mDisplayRow, &ldEntry);			LoadServerAddrPopup();			break;		case kDHCPRestoreButton:			gDHCPData->GetDataDHCPLeaseDataArray(mDisplayRow, &ldEntry);			SetDHCPLeaseDataEntry(mDisplayRow, &ldEntry);			LoadServerAddrPopup();			break;	}}// ---------------------------------------------------------------------------------//		¥ SetWindow// ---------------------------------------------------------------------------------voidCDHCPLeaseDataView::SetWindow(CDHCPWindow* inWindow){	mWindow = inWindow;}// ---------------------------------------------------------------------------------//		¥ GetDHCPLeaseDataEntry// ---------------------------------------------------------------------------------//	Get DHCPLeaseData Entry from View,//	outRow tells what row from the DHCPLeaseDataArray is displayedvoidCDHCPLeaseDataView::GetDHCPLeaseDataEntry(ArrayIndexT &outRow, DHCPLeaseDataEntry_t* outEntry){	Boolean			result = true;	UInt32			leaseUnits;	UInt32			leaseTime;		do {		// get display row		outRow = mDisplayRow;		// get entry		bzero((UInt8*)outEntry, sizeof(DHCPLeaseDataEntry_t));			// Network Interface		outEntry->interfaceAddr = mLeaseNetInterface->GetValue();			// Network Mask		outEntry->netMask = mLeaseNetMask->GetValue();			// Routers		mLeaseRouters->GetDescriptor(outEntry->routerAddrStr);			// Name Servers		mLeaseNameServers->GetDescriptor(outEntry->nameServerAddrStr);			// Lease Default Time		leaseUnits = mLeaseDefaultUnits->GetValue();		leaseTime = mLeaseDefaultTime->GetValue();		if (leaseUnits == kLeaseUnitMinutes) outEntry->leaseDefaultTime = leaseTime * kMinuteSeconds;		else if (leaseUnits == kLeaseUnitHours) outEntry->leaseDefaultTime = leaseTime * kHourSeconds;		else if (leaseUnits == kLeaseUnitDays) outEntry->leaseDefaultTime = leaseTime * kDaySeconds;			// Lease Max Time		leaseUnits = mLeaseMaxUnits->GetValue();		leaseTime = mLeaseMaxTime->GetValue();		if (leaseUnits == kLeaseUnitMinutes) outEntry->leaseMaxTime = leaseTime * kMinuteSeconds;		else if (leaseUnits == kLeaseUnitHours) outEntry->leaseMaxTime = leaseTime * kHourSeconds;		else if (leaseUnits == kLeaseUnitDays) outEntry->leaseMaxTime = leaseTime * kDaySeconds;			// Domain Name		mLeaseDomainName->GetDescriptor(outEntry->domainNameStr);			// is enabled		outEntry->isEnabled = mLeaseEnable->GetValue();		outEntry->isDone = true;				// is done	} while (false);}// ---------------------------------------------------------------------------------//		¥ SetDHCPLeaseDataEntry// ---------------------------------------------------------------------------------//	Set DHCPLeaseData Entry in View if corresponding row is currently displayedvoidCDHCPLeaseDataView::SetDHCPLeaseDataEntry(ArrayIndexT inRow, DHCPLeaseDataEntry_t* inEntry){	Boolean			result = false;	UInt32			leaseTime;	if (mDisplayRow == inRow) {		// set entry			// Network Interface		mLeaseNetInterface->SetValue(inEntry->interfaceAddr);			// Network Mask		mLeaseNetMask->SetValue(inEntry->netMask);			// Routers		mLeaseRouters->SetDescriptor(inEntry->routerAddrStr);			// Name Servers		mLeaseNameServers->SetDescriptor(inEntry->nameServerAddrStr);			// Lease Default Time		if (inEntry->leaseDefaultTime <= kHourSeconds) {			leaseTime = inEntry->leaseDefaultTime/kMinuteSeconds;			mLeaseDefaultTime->SetValue(leaseTime);			mLeaseDefaultUnits->SetValue(kLeaseUnitMinutes);		} else if (inEntry->leaseDefaultTime <= 72 * kHourSeconds) {			leaseTime = inEntry->leaseDefaultTime/kHourSeconds;			mLeaseDefaultTime->SetValue(leaseTime);			mLeaseDefaultUnits->SetValue(kLeaseUnitHours);		} else {			leaseTime = inEntry->leaseDefaultTime/kDaySeconds;			mLeaseDefaultTime->SetValue(leaseTime);			mLeaseDefaultUnits->SetValue(kLeaseUnitDays);		}			// Lease Max Time		if (inEntry->leaseMaxTime <= kHourSeconds) {			leaseTime = inEntry->leaseMaxTime/kMinuteSeconds;			mLeaseMaxTime->SetValue(leaseTime);			mLeaseMaxUnits->SetValue(kLeaseUnitMinutes);		} else if (inEntry->leaseMaxTime <= 72 * kHourSeconds) {			leaseTime = inEntry->leaseMaxTime/kHourSeconds;			mLeaseMaxTime->SetValue(leaseTime);			mLeaseMaxUnits->SetValue(kLeaseUnitHours);		} else {			leaseTime = inEntry->leaseMaxTime/kDaySeconds;			mLeaseMaxTime->SetValue(leaseTime);			mLeaseMaxUnits->SetValue(kLeaseUnitDays);		}			// Domain Name		mLeaseDomainName->SetDescriptor(inEntry->domainNameStr);			// is enabled		mLeaseEnable->SetValue(inEntry->isEnabled);	}}// ---------------------------------------------------------------------------------//		¥ UpdateView// ---------------------------------------------------------------------------------//	Update DHCP Lease Data View from data objectvoidCDHCPLeaseDataView::UpdateView(ArrayIndexT inRow){	DHCPLeaseDataEntry_t	entry;		// set which row we're currently displaying	mDisplayRow = inRow;	// update display	if (gDHCPData->GetDataDHCPLeaseDataArray(inRow, &entry)) {		SetDHCPLeaseDataEntry(inRow, &entry);	} else {		ClearRow(inRow);	}}// ---------------------------------------------------------------------------------//		¥ ClearRow// ---------------------------------------------------------------------------------//	Clear display if current row matchesvoidCDHCPLeaseDataView::ClearRow(ArrayIndexT inRow){	DHCPLeaseDataEntry_t	entry;		if (inRow == mDisplayRow) {		bzero((UInt8*)&entry, sizeof(DHCPLeaseDataEntry_t));		SetDHCPLeaseDataEntry(inRow, &entry);		}}// ---------------------------------------------------------------------------------//		¥ SetupDefaults// ---------------------------------------------------------------------------------voidCDHCPLeaseDataView::SetupDefaults(){	UInt32	interfaceAddr;	UInt32	netMask;	SInt32	prefixLen;	Str255	str;		// setup default parameters	interfaceAddr = mLeaseNetInterface->GetValue();	prefixLen = GetIPAddressClass(interfaceAddr, str);	netMask = 0xFFFFFFFF<<(32-prefixLen);	mLeaseNetMask->SetValue(netMask);	mLeaseRouters->SetDescriptor(IP_NumToStr(interfaceAddr, str));	mLeaseNameServers->SetDescriptor("\p0.0.0.0");	mLeaseDefaultTime->SetValue(24);	// default to 24 hours	mLeaseDefaultUnits->SetValue(kLeaseUnitHours);	mLeaseMaxTime->SetValue(60);		// default to 60 days	mLeaseMaxUnits->SetValue(kLeaseUnitDays);	mLeaseEnable->SetValue(1);	mLeaseDomainName->SetDescriptor("\p");}